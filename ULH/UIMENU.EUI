namespace eval ::euidl::uidlmenu::uidlmenuItems {
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_FP-Power) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "ULH-Support Modeling Analysis"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_FP-Power__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Materials Men_Modelss Men_Model_Mesh Fnc_Model_DDof Fnc_Model_SSolve Men_My_Results"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_FP-Power [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Materials) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Materia_Selection"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Materials__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_My_steel Fnc_My_silicon"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Materials [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Modelss) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Model_Buliding"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Modelss__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_Steel_column Fnc_Silicon_plate"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Modelss [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Model_Mesh) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Model_Mesh"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Model_Mesh__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_Mesh_steel Fnc_Mesh_silicon"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Model_Mesh [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_My_Results) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "My_Results"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_My_Results__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_My_stress_result Men_My_displacement_result"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_My_Results [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_My_stress_result) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Structure_stress"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_My_stress_result__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_X_stress Fnc_Y_stress Fnc_Z_stress Fnc_FN-stress"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_My_stress_result [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_My_displacement_result) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Structure_displacement"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_My_displacement_result__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_X-Structure-displacement Fnc_Y-Structure-displacement Fnc_Z-Structure-displacement Fnc_Total-Structure-displacement"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_My_displacement_result [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Fnc_MFMCC) { args } {
   ans_sendcommand )/NOPR
   ans_sendcommand )*GET,_z1,common,,dofcom,,int,82   ! get fieldflag for MFAN command
   ans_sendcommand )*GET,_z2,common,,MFLDCMD,,int,2279 !
   ans_sendcommand )keyw,KEY,0
   ans_sendcommand )*if,_z1,eq,1,then !{
   ans_sendcommand )*if,_z2,eq,0,then !{
   ans_sendcommand )keyw,KEY,1
   ans_sendcommand )*endif !}
   ans_sendcommand )*if,_z2,eq,3,then !{
   ans_sendcommand )keyw,KEY,1
   ans_sendcommand )*endif !}
   ans_sendcommand )*endif !}
   ans_sendcommand )/GO
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_MFMCC) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "MFX-ANSYS/ANSYS"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Fnc_MFMCC__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Men_MFS_MCCSetup {0 (KEY)}} {Fnc_MFX_AA_LoadComm {0 (KEY)}} {Fnc_MFX_Time {0 (KEY)}} {Men_MFX_AC_Advanced {0 (KEY)}} {Fnc_MFMCC_Clear {0 (KEY)}} {Fnc_MFMCC_Stat {0 (KEY)}} {Fnc_MFX_Write {0 (KEY)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_MFMCC [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Fnc_MFSCC) { args } {
   ans_sendcommand )/NOPR
   ans_sendcommand )*GET,_z1,common,,dofcom,,int,82   ! get fieldflag for MFAN command
   ans_sendcommand )*GET,_z2,common,,MFLDCMD,,int,2279 !
   ans_sendcommand )keyw,KEY,0
   ans_sendcommand )*if,_z1,eq,1,then !{
   ans_sendcommand )*if,_z2,eq,0,then !{
   ans_sendcommand )keyw,KEY,1
   ans_sendcommand )*endif !}
   ans_sendcommand )*if,_z2,eq,1,then !{
   ans_sendcommand )keyw,KEY,1
   ans_sendcommand )*endif !}
   ans_sendcommand )*endif !}
   ans_sendcommand )/GO
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_MFSCC) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "MFS-Single Code"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Fnc_MFSCC__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Men_MFS_Define {0 (KEY)}} {Fnc_MFS_Capture {0 (KEY)}} {Fnc_MFS_Import {0 (KEY&PREP7)}} {Men_MFS_SCCSetup {0 (KEY)}} {Men_MFS_SCCInterface {0 (KEY)}} {Men_MFS_Stagger {0 (KEY)}} {Fnc_MFS_Time {0 (KEY)}} {Fnc_MFS_Freq {0 (KEY)}} {Fnc_MFSCC_Clear {0 (KEY)}} {Fnc_MFSCC_Stat {0 (KEY)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_MFSCC [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Fnc_MFSCC_Solu) { args } {
   ans_sendcommand )/NOPR
   ans_sendcommand )*GET,_z1,common,,dofcom,,int,82   ! get fieldflag for MFAN command
   ans_sendcommand )*GET,_z2,common,,MFLDCMD,,int,2279 !
   ans_sendcommand )keyw,KEY,0
   ans_sendcommand )*if,_z1,eq,1,then !{
   ans_sendcommand )*if,_z2,eq,0,then !{
   ans_sendcommand )keyw,KEY,1
   ans_sendcommand )*endif !}
   ans_sendcommand )*if,_z2,eq,1,then !{
   ans_sendcommand )keyw,KEY,1
   ans_sendcommand )*endif !}
   ans_sendcommand )*endif !}
   ans_sendcommand )/GO
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_MFSCC_Solu) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "MFS-Single Code"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Fnc_MFSCC_Solu__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Men_MFS_Define {0 (KEY)}} {Fnc_MFS_Capture {0 (KEY)}} {Men_MFS_SCCSetup {0 (KEY)}} {Men_MFS_SCCInterface {0 (KEY)}} {Men_MFS_Stagger {0 (KEY)}} {Fnc_MFS_Time {0 (KEY)}} {Fnc_MFS_Freq {0 (KEY)}} {Fnc_MFSCC_Clear {0 (KEY)}} {Fnc_MFSCC_Stat {0 (KEY)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_MFSCC_Solu [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_MFSET_KEY) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PREP7*SOLUTION*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Select method"]
   lappend tags leaf
   lappend tags leaflevel__$level
   set icon dlgicon
   set branchName [list Fnc_MFSET_KEY__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Fnc_MFX_Ans_CFX) { args } {
   ans_sendcommand )/NOPR
   ans_sendcommand )*GET,_z1,common,,dofcom,,int,82   ! get fieldflag for MFAN command
   ans_sendcommand )*GET,_z2,common,,MFLDCMD,,int,2279 !
   ans_sendcommand )keyw,KEY,0
   ans_sendcommand )*if,_z1,eq,1,then !{
   ans_sendcommand )*if,_z2,eq,0,then !{
   ans_sendcommand )keyw,KEY,1
   ans_sendcommand )*endif !}
   ans_sendcommand )*if,_z2,eq,2,then !{
   ans_sendcommand )keyw,KEY,1
   ans_sendcommand )*endif !}
   ans_sendcommand )*endif !}
   ans_sendcommand )/GO
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_MFX_Ans_CFX) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "MFX-ANSYS/CFX"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Fnc_MFX_Ans_CFX__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Fnc_MFX_AC_Solu {0 (KEY)}} {Fnc_MFX_AC_LoadComm {0 (KEY)}} {Fnc_MFX_Time {0 (KEY)}} {Men_MFX_AC_Advanced {0 (KEY)}} {Fnc_MFX_Clear {0 (KEY)}} {Fnc_MFMCC_Stat {0 (KEY)}} {Fnc_MFX_Write {0 (KEY)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_MFX_Ans_CFX [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AAOnComp) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*PR_FLUID*PR_CFD*pr_set) + (lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*FLUID*CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+(cfd*NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "On Components"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AAOnComp__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_CMDOMEGA_Dir Fnc_CMDOMEGA_DNPik Fnc_CMDOMEGA_DKPik Fnc_CMDOMEGA_Axis Fnc_CMDOMEGA_ANPik Fnc_CMDOMEGA_AKPik"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AAOnComp [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AVOnComp) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*PR_FLUID*PR_CFD*pr_set) + (lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*FLUID*CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+(cfd*NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "On Components"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AVOnComp__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_CMOMEGA_Dir Fnc_CMOMEGA_DNPik Fnc_CMOMEGA_DKPik Fnc_CMOMEGA_Axis Fnc_CMOMEGA_ANPik Fnc_CMOMEGA_AKPik"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AVOnComp [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Adamsc) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (STRUCTRL+lsdyna)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "ADAMS Connection"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Adamsc__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ADAMSOUT Fnc_WSPRINGS"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Adamsc [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Add) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Add"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Add__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_VADD Fnc_AADD Fnc_LCOMB"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Add [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AdvSolOpt) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Advanced Solution Option"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AdvSolOpt__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_DecOpt Men_SymmetryOptions Men_Surf_Mesh"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AdvSolOpt [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AnalyTyp) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 1 [list (LINPLUS*THERMAL*ELECMAG)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Analysis Type"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AnalyTyp__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ANTYPE Fnc_Restart {Fnc_EuidlSol {0 (lsdyna+SOLUTION)}} Fnc_EXPASS Fnc_An_Opts Fnc_ANTYPE Fnc_Restart Fnc_EXPASS"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AnalyTyp [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Analysis) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 1 [list (LINPLUS*THERMAL*ELECMAG)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Analysis Type"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Analysis__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ANTYPE {Fnc_Restart {0 (lsdyna+((modal+buckling+trnsient)*FULL*SIMPLOFF))}} {Fnc_EuidlSol {0 (lsdyna+SOLUTION)}} {Fnc_EXPASS {0 (lsdyna+(MODAL*SUBSTRUC*BUCKLING*TRNSIENT*HARMONIC*SIMPLOFF))}} {Fnc_An_Opts {0 (lsdyna+ROMES*((static+trnsient)*SIMPLOFF*REDUCED*MODESUP))}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Analysis [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AngAccel) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*PR_FLUID*PR_CFD*pr_set) + (lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*FLUID*CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+(cfd*NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Angular Accel"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AngAccel__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DOMEGA Men_AAOnComp"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AngAccel [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AngVeloc) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*PR_FLUID*PR_CFD*pr_set) + (lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*FLUID*CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+(cfd*NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Angular Velocity"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AngVeloc__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_OMEGA Fnc_RotCoriolis Men_AVOnComp Fnc_SYNCRO"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AngVeloc [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppConvect) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_THERM*PR_FLUID*PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (THERMAL*FLUID*CFD*NOFILTER)]]} {
      return -code error
   }
   if {![ans_getfilter 1 [list (THERMAL*FLOTRAN)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Convection"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppConvect__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFL_conv Fnc_SFA_conv Fnc_SF_conv Men_AppConvect_-OnElements- Fnc_LDREAD_film"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppConvect [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppConvect_-OnElements-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "On Elements"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_AppConvect_-OnElements-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFE_convu Fnc_SFE_convt"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppConvect_-OnElements- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppDisplace) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*pr_set)+(lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (LINPLUS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Displacement"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppDisplace__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DL_u Fnc_DA_u Fnc_DK_u Fnc_D_u Fnc_D_uCM Fnc_DJ_joint Men_AppDisplace_-SymmetryB.C.- Men_AppDisplace_-AntisymmB.C.-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppDisplace [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppDisplace_-SymmetryB.C.-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Symmetry B.C."]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_AppDisplace_-SymmetryB.C.-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DL_symm_na Fnc_DL_symm Fnc_DA_symm Fnc_DSYM_symm"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppDisplace_-SymmetryB.C.- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppDisplace_-AntisymmB.C.-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Antisymm B.C."]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_AppDisplace_-AntisymmB.C.-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DL_asym_na Fnc_DL_asym Fnc_DA_asym Fnc_DSYM_asym"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppDisplace_-AntisymmB.C.- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppElecExcit) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_ELMAG*pr_set*PR_MULTI*(PR_THERM+ELECTRIC))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (ELECTRIC+vfed)*CIRC*ELECSTAT*TIMEINTP*EDGEELC*NOFILTER)]]} {
      return -code error
   }
   if {![ans_getfilter 1 [list (ELECMAG*THERMAL)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Excitation"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppElecExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_-AppCurrent- Fnc_-ImprCurr- Fnc_-AppCharge- Fnc_-AppCharDens- Fnc_-AppSurfChar- Fnc_-AppElecField-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppElecExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppCurrent-_HEADMen_AppElecExcit) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppCurrent"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppCurrent-_HEADMen_AppElecExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FK_amps Fnc_F_amps"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppCurrent-_HEADMen_AppElecExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-ImprCurr-_HEADMen_AppElecExcit) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-ImprCurr"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-ImprCurr-_HEADMen_AppElecExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FK_amps_ic Fnc_F_amps_ic"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-ImprCurr-_HEADMen_AppElecExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppCharge-_HEADMen_AppElecExcit) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppCharge"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppCharge-_HEADMen_AppElecExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FK_chrg Fnc_F_chrg"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppCharge-_HEADMen_AppElecExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppCharDens-_HEADMen_AppElecExcit) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppCharDens"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppCharDens-_HEADMen_AppElecExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFL_chrg Fnc_BFA_chrg Fnc_BFV_chrg Fnc_BFK_chrgd Fnc_BF_chrgd Fnc_BFE_chrgd"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppCharDens-_HEADMen_AppElecExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppSurfChar-_HEADMen_AppElecExcit) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppSurfChar"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppSurfChar-_HEADMen_AppElecExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFL_chrgs Fnc_SFA_chrgs Fnc_SF_chrgs Fnc_SFE_chrgs"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppSurfChar-_HEADMen_AppElecExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppElecField-_HEADMen_AppElecExcit) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppElecField"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppElecField-_HEADMen_AppElecExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFL_ef Fnc_BFA_ef Fnc_BF_ef"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppElecField-_HEADMen_AppElecExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppElecFlag) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_ELMAG*pr_set*PR_MULTI*(PR_THERM+ELECTRIC))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((ELECTRIC+vfed)*CIRC*ELECSTAT*TIMEINTP*EDGEELC*NOFILTER)]]} {
      return -code error
   }
   if {![ans_getfilter 1 [list (ELECMAG*THERMAL)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Flag"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppElecFlag__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FMAGBCE Fnc_-AppInfinite- Fnc_-AppMaxwell-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppElecFlag [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppInfinite-_HEADMen_AppElecFlag) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppInfinite"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppInfinite-_HEADMen_AppElecFlag__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFL_inf Fnc_SFA_inf Fnc_SF_inf"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppInfinite-_HEADMen_AppElecFlag [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppMaxwell-_HEADMen_AppElecFlag) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppMaxwell"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppMaxwell-_HEADMen_AppElecFlag__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFL_mxwf Fnc_SFA_mxwf Fnc_SF_mxwf"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppMaxwell-_HEADMen_AppElecFlag [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppElecPoten) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_ELMAG*pr_set*PR_MULTI*(PR_THERM+ELECTRIC))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (ELECTRIC+vfed)*CIRC*ELECSTAT*TIMEINTP*EDGEELC*NOFILTER)]]} {
      return -code error
   }
   if {![ans_getfilter 1 [list (ELECMAG*THERMAL)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Boundary"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppElecPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_-AppImped_E- Fnc_-AppShield- Fnc_-Voltage- Fnc_-TimeInt- Fnc_-PerfEC- Fnc_-PMLOpt- Men_AppEmagTemp"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppElecPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppImped_E-_HEADMen_AppElecPoten) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppImped_E"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppImped_E-_HEADMen_AppElecPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFA_impdE Fnc_SF_impdE"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppImped_E-_HEADMen_AppElecPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppShield-_HEADMen_AppElecPoten) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppShield"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppShield-_HEADMen_AppElecPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFA_shld Fnc_SF_shld"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppShield-_HEADMen_AppElecPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-Voltage-_HEADMen_AppElecPoten) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-Voltage"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-Voltage-_HEADMen_AppElecPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DK_volt Fnc_D_volt Fnc_DL_volt Fnc_DA_volt Men_J-Normal1 Fnc_J-Parall"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-Voltage-_HEADMen_AppElecPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-TimeInt-_HEADMen_AppElecPoten) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-TimeInt"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-TimeInt-_HEADMen_AppElecPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DK_volt_ti Fnc_D_volt_ti Fnc_DA_volt_ti Men_J-Normal-T Fnc_J-Parall-T"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-TimeInt-_HEADMen_AppElecPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-PerfEC-_HEADMen_AppElecPoten) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-PerfEC"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-PerfEC-_HEADMen_AppElecPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DL_pec Fnc_DA_pec Fnc_D_pec Fnc_DA_pmc"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-PerfEC-_HEADMen_AppElecPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-PMLOpt-_HEADMen_AppElecPoten) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-PMLOpt"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-PMLOpt-_HEADMen_AppElecPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PMLOPT Fnc_PMLOPT_ST Fnc_PMLOPT_CLE"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-PMLOpt-_HEADMen_AppElecPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppEmagTemp) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((ELECTRIC+ELECSTAT*EDGEELC*QUASISTA)*(MAGNETIC+thermal)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Temperature"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppEmagTemp__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_EM_BFL_temp Fnc_EM_BFA_temp Fnc_EM_BFV_temp Fnc_EM_BFK_temp Fnc_EM_BF_temp Fnc_EM_LDREAD_temp Fnc_EM_TUNIF Fnc_EM_BFE_temp"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppEmagTemp [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppFSI) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_FLUID*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (FLUID*NOFILTER)]]} {
      return -code error
   }
   if {![ans_getfilter 1 [list (FULL_ANS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Field Surface"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppFSI__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFL_fsi Fnc_SFA_fsi Fnc_SF_fsi"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppFSI [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppFlPrsANS) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_FLUID*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (FLUID*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Pressure DOF"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppFlPrsANS__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DK_pres Fnc_DL_pres Fnc_DA_pres Fnc_D_pres"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppFlPrsANS [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppFlowANS) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_FLUID*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (FLUID*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Flow"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppFlowANS__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FK_flow_a Fnc_F_flow_a"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppFlowANS [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppFluidDisp) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (CFD*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Displacement"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppFluidDisp__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DK_uCFD Fnc_DL_uCFD Fnc_DA_uCFD Fnc_D_uCFD"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppFluidDisp [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppFluidPres) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (CFD*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Pressure DOF"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppFluidPres__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DK_pres Fnc_DL_pres Fnc_DA_pres Fnc_D_pres"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppFluidPres [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppFluidVel) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (CFD*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Velocity"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppFluidVel__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DK_v Fnc_DL_v Fnc_DA_v Fnc_D_v"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppFluidVel [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppForce) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*PR_CFD*pr_set) + (lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Force/Moment"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppForce__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FK_fm Fnc_F_fm Fnc_F_fmCM Fnc_FJ_joint Fnc_LDREAD_reac Fnc_LDREAD_mforc"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppForce [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppHeatFlow) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_THERM*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (THERMAL*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Heat Flow"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppHeatFlow__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FK_heat Fnc_F_heat"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppHeatFlow [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppHeatFlux) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_THERM*PR_FLUID*PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (THERMAL*FLUID*CFD*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Heat Flux"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppHeatFlux__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFL_hflux Fnc_SFA_hflux Fnc_SF_hflux Fnc_SFE_hflux Fnc_LDREAD_hflu Fnc_LDREAD_hfhf"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppHeatFlux [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppHeatGen) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_THERM*PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (THERMAL*CFD*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Heat Generat"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppHeatGen__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFL_hgen Fnc_BFA_hgen Fnc_BFV_hgen Fnc_BFK_hgen Fnc_BF_hgen Fnc_BFUNIF_hgen Fnc_BFE_hgen Fnc_LDREAD_hgen"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppHeatGen [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppHeatGenANS) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_FLUID*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (FLUID*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Heat Generat"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppHeatGenANS__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFK_hgen Fnc_BF_hgen Fnc_BFUNIF_hgen Fnc_BFE_hgen Fnc_LDREAD_hgen"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppHeatGenANS [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppHeatGenCFD) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (CFD*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Heat Generat"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppHeatGenCFD__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFA_hgen Fnc_BFV_hgen Fnc_BF_hgen Fnc_BFE_hgen Fnc_LDREAD_hgen"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppHeatGenCFD [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppImpedance) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (pr_set*PR_FLUID)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (FLUID*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Impedance"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppImpedance__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFL_impd Fnc_SFA_impd Fnc_SF_impd Fnc_SFE_impd"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppImpedance [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppLoadVect) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (PREP7*SOLUTION+pmethod*elecstat)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (LINPLUS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Load Vector"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppLoadVect__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFE_selv Fnc_LVSCALE Fnc_LVSCALE_PSD Fnc_RMLVSCALE"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppLoadVect [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppMagExcit) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_ELMAG*pr_set+cfd)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((MAGNETIC)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Excitation"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppMagExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_-AppCurrDens- Fnc_-AppMagField- Fnc_-AppVoltDrop- {Fnc_RACE {0 (SCALARP*NOFILTER)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppMagExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppCurrDens-_HEADMen_AppMagExcit) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppCurrDens"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppCurrDens-_HEADMen_AppMagExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFL_js Fnc_BFA_js Fnc_BFV_js Fnc_BFK_js Fnc_BF_js Fnc_BFE_js Fnc_LDREAD_js"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppCurrDens-_HEADMen_AppMagExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppMagField-_HEADMen_AppMagExcit) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppMagField"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppMagField-_HEADMen_AppMagExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFA_h Fnc_BF_h"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppMagField-_HEADMen_AppMagExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppVoltDrop-_HEADMen_AppMagExcit) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppVoltDrop"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppVoltDrop-_HEADMen_AppMagExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFA_vltg Fnc_BFV_vltg Fnc_BFE_vltg"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppVoltDrop-_HEADMen_AppMagExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppMagFlag) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_ELMAG*pr_set+cfd)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((MAGNETIC+edgeelc)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Flag"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppMagFlag__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FMAGBC Fnc_-AppInfinite- Fnc_-AppMCI-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppMagFlag [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppInfinite-_HEADMen_AppMagFlag) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppInfinite"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppInfinite-_HEADMen_AppMagFlag__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFL_inf Fnc_SFA_inf Fnc_SF_inf"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppInfinite-_HEADMen_AppMagFlag [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppMCI-_HEADMen_AppMagFlag) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppMCI"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppMCI-_HEADMen_AppMagFlag__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFA_mci Fnc_SF_mci"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppMCI-_HEADMen_AppMagFlag [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppMagMisc) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_ELMAG*pr_set+cfd)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((MAGNETIC+edgeelc)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Other"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppMagMisc__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_-AppMagFlux- Fnc_-AppCurrSeg- Fnc_-AppMaxwell- Fnc_-AppVirtDisp- Men_AppMagMisc_-ElectricField-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppMagMisc [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppMagFlux-_HEADMen_AppMagMisc) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppMagFlux"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppMagFlux-_HEADMen_AppMagMisc__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FK_flux Fnc_F_flux"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppMagFlux-_HEADMen_AppMagMisc [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppCurrSeg-_HEADMen_AppMagMisc) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppCurrSeg"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppCurrSeg-_HEADMen_AppMagMisc__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FK_csg Fnc_F_csg"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppCurrSeg-_HEADMen_AppMagMisc [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppMaxwell-_HEADMen_AppMagMisc) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppMaxwell"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppMaxwell-_HEADMen_AppMagMisc__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFL_mxwf Fnc_SFA_mxwf Fnc_SF_mxwf"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppMaxwell-_HEADMen_AppMagMisc [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppVirtDisp-_HEADMen_AppMagMisc) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppVirtDisp"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppVirtDisp-_HEADMen_AppMagMisc__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFK_mvdi Fnc_BF_mvdi"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppVirtDisp-_HEADMen_AppMagMisc [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppMagMisc_-ElectricField-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Electric Field"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_AppMagMisc_-ElectricField-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFE_EF Fnc_LDREAD_EF"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppMagMisc_-ElectricField- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppMagPoten) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_ELMAG*pr_set+cfd)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((MAGNETIC+edgeelc)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Boundary"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppMagPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_-ScalarPot- Fnc_-VectorPot- Fnc_-EdgeMVP- Men_AppEmagTemp"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppMagPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-ScalarPot-_HEADMen_AppMagPoten) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-ScalarPot"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-ScalarPot-_HEADMen_AppMagPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DK_mag Fnc_D_mag Fnc_DA_mag Fnc_D_magP Men_FluxNorma"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-ScalarPot-_HEADMen_AppMagPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-VectorPot-_HEADMen_AppMagPoten) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-VectorPot"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-VectorPot-_HEADMen_AppMagPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DL_a Fnc_DA_a Fnc_DK_a Fnc_D_a Men_VectFluxP Men_VectFluxN Fnc_PERBC2D"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-VectorPot-_HEADMen_AppMagPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-EdgeMVP-_HEADMen_AppMagPoten) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-EdgeMVP"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-EdgeMVP-_HEADMen_AppMagPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_FluxPMVP Fnc_DA_azN"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-EdgeMVP-_HEADMen_AppMagPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppNormVel) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_FLUID*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((FLUID+TFILM)*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Normal Velo"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppNormVel__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFA_norm_v Fnc_BFE_norm_v"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppNormVel [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppOtherStru) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*PR_FLUID*PR_CFD*pr_set) + (lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*FLUID*CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Other"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppOtherStru__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_App_Stress Fnc_-Fluence-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppOtherStru [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-Fluence-_HEADMen_AppOtherStru) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-Fluence"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-Fluence-_HEADMen_AppOtherStru__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFL_flue Fnc_BFA_flue Fnc_BFV_flue Fnc_BFK_flue Fnc_BF_flue Fnc_BFE_flue Fnc_BFUNIF_flue"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-Fluence-_HEADMen_AppOtherStru [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppPressure) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*pr_set) + (lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Pressure"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppPressure__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFL_pres Fnc_SFA_pres Fnc_SF_pres Fnc_SF_presCM {Fnc_SFE_pres {0 (cyclic)}} {Fnc_SFE_p {0 (CYCLIC)}} Fnc_SFE_presCM Fnc_LDREAD_pres Fnc_SFBEAM"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppPressure [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppRad) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (PREP7*SOLUTION)+(CFD*NOFILTER)]]} {
      return -code error
   }
   if {![ans_getfilter 1 [list (THERMAL+FLOTRAN+LINPLUS+FULL_ANS)*(FLOTRAN)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Ambient Rad"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppRad__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFL_radF Fnc_SFA_radF Fnc_SF_radF Fnc_SFE_radF"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppRad [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppRad_old) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (PREP7*SOLUTION)+(CFD*NOFILTER)]]} {
      return -code error
   }
   if {![ans_getfilter 1 [list (THERMAL+FLOTRAN+LINPLUS+FULL_ANS)*(FLOTRAN)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Radiation"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppRad_old__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFL_rad Fnc_SFA_rad Fnc_SF_rad Fnc_SFE_rad"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppRad_old [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppRadiSF) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (PREP7*SOLUTION)+((RADSURF+THERMAL+cfd)*NOFILTER)]]} {
      return -code error
   }
   if {![ans_getfilter 1 [list (THERMAL)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Radiation"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppRadiSF__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFL_rdmx Fnc_SFA_rdmx Fnc_SF_rdmx Fnc_SFE_rdmx"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppRadiSF [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppSpecies) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Species"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppSpecies__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DL_spec Fnc_DA_spec Fnc_D_spec"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppSpecies [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppSpectrum) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*pr_set) +lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((STRUCTRL+SPECTRUM)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Spectrum"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppSpectrum__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_-BasePSD- Fnc_-NodePSD- Fnc_-SinglPtFor- Fnc_-MultiPtBas- Fnc_-MultiPtNod-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppSpectrum [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-BasePSD-_HEADMen_AppSpectrum) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-BasePSD"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-BasePSD-_HEADMen_AppSpectrum__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DK_psd Fnc_D_psd"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-BasePSD-_HEADMen_AppSpectrum [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-NodePSD-_HEADMen_AppSpectrum) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-NodePSD"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-NodePSD-_HEADMen_AppSpectrum__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FK_psd Fnc_F_psd"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-NodePSD-_HEADMen_AppSpectrum [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-SinglPtFor-_HEADMen_AppSpectrum) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-SinglPtFor"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-SinglPtFor-_HEADMen_AppSpectrum__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FK_sv Fnc_F_sv"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-SinglPtFor-_HEADMen_AppSpectrum [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-MultiPtBas-_HEADMen_AppSpectrum) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-MultiPtBas"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-MultiPtBas-_HEADMen_AppSpectrum__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DK_multi Fnc_D_multi"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-MultiPtBas-_HEADMen_AppSpectrum [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-MultiPtNod-_HEADMen_AppSpectrum) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-MultiPtNod"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-MultiPtNod-_HEADMen_AppSpectrum__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FK_multi Fnc_F_multi"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-MultiPtNod-_HEADMen_AppSpectrum [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppStruInertia) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*PR_FLUID*PR_CFD*pr_set) + (lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*FLUID*CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+(cfd*NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Inertia"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppStruInertia__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_AppStruInertia_-AngularVeloc- Men_AppStruInertia_-AngularAccel- Fnc_Coriolis Men_AppStruInertia_-Gravity- Fnc_IRLF"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppStruInertia [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppStruInertia_-AngularVeloc-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Angular Veloc"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_AppStruInertia_-AngularVeloc-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_OMEGA Fnc_RotCoriolis Men_AVOnComp Fnc_SYNCRO"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppStruInertia_-AngularVeloc- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppStruInertia_-AngularAccel-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Angular Accel"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_AppStruInertia_-AngularAccel-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DOMEGA Men_AAOnComp"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppStruInertia_-AngularAccel- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppStruInertia_-Gravity-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Gravity"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_AppStruInertia_-Gravity-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ACEL Fnc_CMACEL"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppStruInertia_-Gravity- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppStruTemp) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*pr_set) + (lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Temperature"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppStruTemp__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFL_temp Fnc_BFA_temp Fnc_BFV_temp Fnc_BFK_temp Fnc_BF_temp Fnc_BF_tempCM Fnc_LDREAD_temp Fnc_TUNIF Fnc_BFE_temp Fnc_BFE_tempCM"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppStruTemp [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppTemp) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_THERM*PR_FLUID*PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (THERMAL*FLUID*CFD*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Temperature"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppTemp__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DK_temp Fnc_DL_temp Fnc_DA_temp Fnc_D_temp Fnc_TUNIF Fnc_LDREAD_tempCFD Fnc_LDREAD_tempD"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppTemp [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppTurb) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Turbulence"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppTurb__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DL_turb Fnc_DA_turb Fnc_D_turb"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppTurb [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppVolFracCFD) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (CFD*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Volume Fract"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_AppVolFracCFD__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_AppVolFracCFD_-BoundLoads-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppVolFracCFD [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_AppVolFracCFD_-BoundLoads-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Bound Loads"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_AppVolFracCFD_-BoundLoads-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFL_VFRC Fnc_SFE_VFRC"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_AppVolFracCFD_-BoundLoads- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ApplyBodFor) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_CFD*pr_set) +(lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (CFD*NOFILTER)]]} {
      return -code error
   }
   if {![ans_getfilter 1 [list (LINPLUS*FLOTRAN)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Forces"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ApplyBodFor__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_ApplyBodFor_-BodyForces- Men_ApplyBodFor_-Forces-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ApplyBodFor [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ApplyBodFor_-BodyForces-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Body Forces"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ApplyBodFor_-BodyForces-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BF_Force"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ApplyBodFor_-BodyForces- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ApplyBodFor_-Forces-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Forces"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ApplyBodFor_-Forces-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_LDREAD_mforc"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ApplyBodFor_-Forces- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ApplyFSI) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_THERM*PR_FLUID*PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (THERMAL*FLUID*CFD*STRUCTRL*NOFILTER)]]} {
      return -code error
   }
   if {![ans_getfilter 1 [list (THERMAL*FLOTRAN*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Field Surface Intr"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ApplyFSI__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFL_FSInt Fnc_SFA_FSInt Fnc_SF_FSInt Fnc_SFE_FSInt"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ApplyFSI [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ApplyFVIN) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Field Volume Intr"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ApplyFVIN__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFE_FVIN"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ApplyFVIN [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ApplyLoads) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (PREP7*SOLUTION)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Apply"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ApplyLoads__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_StrucApply Men_ThermApply Men_MagApply Men_ElecApply Men_FluidApply Men_ApplyFSI Men_ApplyFVIN Men_InitialCond Men_AppLoadVect Men_ApplyLoads_-Functions-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ApplyLoads [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ApplyLoads_-Functions-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Functions"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ApplyLoads_-Functions-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FUNC_EDIT Fnc_FUNC_READ"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ApplyLoads_-Functions- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Arb_Area) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Arbitrary"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Arb_Area__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_A Fnc_ASUB Fnc_AL Fnc_ASKIN Fnc_AOFFST"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Arb_Area [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Arb_Volume) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 1 [list (mdl2d)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Arbitrary"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Arb_Volume__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_V Fnc_VA"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Arb_Volume [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Arc) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Arcs"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Arc__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_LARC_3kp Fnc_LARC Fnc_CIRCLE_arc Fnc_CIRCLE"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Arc [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Archive) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Archive Model"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Archive__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_CDWRITE Fnc_CDREAD"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Archive [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_Aux12) { args } {
   ans_sendcommand )/nopr
   ans_sendcommand )!*get,_z1,active,,routin
   ans_sendcommand )!*if,_z1,ne,62,then
   ans_sendcommand /AUX12
   ans_sendcommand )!*endif
   ans_sendcommand )/go
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Aux12) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 1 [list (THERMAL)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Radiation Opt"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Aux12__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Fnc_Aux12Fil {0 ((pr_cfd+cfd)*NOFILTER)}} Men_Aux12_-MatrixMethod- Men_Aux12_-RadiosityMeth-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Aux12 [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Aux12_-MatrixMethod-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Matrix Method"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Aux12_-MatrixMethod-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_Emiss_aux12 Fnc_SetUp_aux12 Fnc_Write_aux12"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Aux12_-MatrixMethod- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Aux12_-RadiosityMeth-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Radiosity Meth"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Aux12_-RadiosityMeth-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_RadOpt12 Fnc_RadOpt13 Fnc_VFCALC Fnc_VFQUERY"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Aux12_-RadiosityMeth- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_BEAM_endr) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Beams"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_BEAM_endr__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ENDR_all Fnc_ENDR_node"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_BEAM_endr [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Beam_Custom) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Custom Sections"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Beam_Custom__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SecWrite_A Fnc_User_Beam Fnc_Beam_Edit"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Beam_Custom [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Beam_Taper) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Taper Sections"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Beam_Taper__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_Taper_explct Fnc_Taper_pick"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Beam_Taper [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Block) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 1 [list (mdl2d)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Block"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Block__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BLC4 Fnc_BLC5 Fnc_BLOCK"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Block [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_CMS) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((STRUCTRL+thermal+pr_therm+pr_fluid)+transduc)*(PR_STRUC+pr_therm+pr_fluid)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "CMS"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_CMS__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_CMS_-CMSSuperelements- Men_CMS_-CMSInterface- Fnc_CMS_Stat"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_CMS [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_CMS_-CMSSuperelements-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "CMS Superelements"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_CMS_-CMSSuperelements-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_CMS_Name Fnc_ALLSEL"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_CMS_-CMSSuperelements- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_CMS_-CMSInterface-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "CMS Interface"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_CMS_-CMSInterface-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_M"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_CMS_-CMSInterface- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_CheckCtrl) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Checking Ctrls"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_CheckCtrl__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_Mesh_Check Fnc_Shpp_Check Fnc_SHPP_toggle"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_CheckCtrl [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Check_geom) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Check Geom"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Check_geom__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Fnc_SSLN {0 (priges)}} {Men_Degen_copy {0 (priges)}} Fnc_KDIS Fnc_NDIS"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Check_geom [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Check_mesh) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Check Mesh"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Check_mesh__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Check_mesh_-IndividualElm- Men_Check_mesh_-Connectivity-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Check_mesh [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Check_mesh_-IndividualElm-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Individual Elm"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Check_mesh_-IndividualElm-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_CHECK_plt Fnc_CHECK_ESEL"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Check_mesh_-IndividualElm- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Check_mesh_-Connectivity-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Connectivity"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Check_mesh_-Connectivity-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_MCHECK Fnc_MCHECK_ESEL"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Check_mesh_-Connectivity- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ChkElmShape) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Check Elem Shape"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ChkElmShape__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ESCHECK_plt Fnc_ESCHECK_ESEL"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ChkElmShape [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_CirR3) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Indp Curr Src"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_CirR3__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_CirP3_0 Fnc_CirP3_1 Fnc_CirP3_2 Fnc_CirP3_3 Fnc_CirP3_4"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_CirR3 [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_CirR3_copy) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Indp Curr Src"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_CirR3_copy__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_CirP3_0 Fnc_CirP3_1 Fnc_CirP3_2 Fnc_CirP3_3 Fnc_CirP3_4"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_CirR3_copy [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_CirR4) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Indp Vltg Src"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_CirR4__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_CirP4_0 Fnc_CirP4_1 Fnc_CirP4_2 Fnc_CirP4_3 Fnc_CirP4_4"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_CirR4 [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_CirR4_copy) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Indp Vltg Src"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_CirR4_copy__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_CirP4_0 Fnc_CirP4_1 Fnc_CirP4_2 Fnc_CirP4_3 Fnc_CirP4_4"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_CirR4_copy [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Circle) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Circle"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Circle__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_CYL4_2d Fnc_CYL4_holl_2d Fnc_CYL4_part_2d Fnc_CYL5_2d Fnc_PCIRC"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Circle [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Circuit) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 1 [list (ELECMAG)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Circuit"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Circuit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_Cir_WP Fnc_Iconscale Men_Circuit_-Builder- Fnc_rcedit_124 Men_Circuit_-Plot- Fnc_Cir_Merge Fnc_EDEL_MEM"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Circuit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Circuit_-Builder-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Builder"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Circuit_-Builder-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Circuit_E Men_Circuit_M Men_Circuit_P Men_Circuit_T Men_Circuit_ROM"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Circuit_-Builder- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Circuit_-Plot-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Plot"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Circuit_-Plot-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_Cir_Nod Fnc_CirPR Fnc_CirPWF_1 Fnc_Plt_Diode Fnc_Plt_EMT Fnc_Plt_Spring"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Circuit_-Plot- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_Circuit_E) { args } {
   ans_sendcommand )/NOPR
   ans_sendcommand )KEYW,PIEZO,0
   ans_sendcommand )*set,_e0,'124'
   ans_sendcommand )/GO
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Circuit_E) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Electric"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Circuit_E__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_Wire Fnc_CirP0 Fnc_CirP1 Fnc_CirP2 Fnc_CirP8 Fnc_Diode Fnc_ZeDiode Men_CirR3 Men_CirR4 Fnc_CirP9_1 Fnc_CirP10_1 Fnc_CirP11_1 Fnc_CirP12_1 Fnc_CirP5_1 Fnc_CirP6_1 Fnc_CirP7_1"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Circuit_E [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Circuit_M) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Mechanical"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Circuit_M__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Circuit_M_-Spring- Men_Circuit_M_-Damper- Fnc_Mass"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Circuit_M [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Circuit_M_-Spring-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Spring"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Circuit_M_-Spring-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_Trn_Spring Fnc_Trn_Spr_No Fnc_Rot_Spring Fnc_Rot_Spr_No"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Circuit_M_-Spring- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Circuit_M_-Damper-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Damper"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Circuit_M_-Damper-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_Trn_Damper Fnc_Trn_Dam_No Fnc_Rot_Damper Fnc_Rot_Dam_No Fnc_Slide_Film"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Circuit_M_-Damper- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_Circuit_P) { args } {
   ans_sendcommand )/NOPR
   ans_sendcommand )KEYW,PIEZO,1
   ans_sendcommand )*set,_e0,'94'
   ans_sendcommand )/GO
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Circuit_P) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 1 [list ((LINPLUS+THERMAL+E3+ELECMAG+FLOTRAN)*PP*ED)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Piezoelectric"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Circuit_P__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_Wire Fnc_CirP0 Fnc_CirP1 Fnc_CirP2 Men_CirR3_copy Men_CirR4_copy"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Circuit_P [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Circuit_ROM) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 1 [list (ELECMAG*PP*ED)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "ROM"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Circuit_ROM__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ROMBRS Fnc_ROMELM"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Circuit_ROM [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Circuit_T) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 1 [list ((LINPLUS+THERMAL+E3+ELECMAG+FLOTRAN)*PP*ED)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Transducer"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Circuit_T__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_Transducer"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Circuit_T [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Clear) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Clear"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Clear__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_KCLEAR Fnc_LCLEAR Fnc_ACLEAR Fnc_VCLEAR"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Clear [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_CntcSurf) { args } {
   ans_sendcommand )/NOPR
   ans_sendcommand )KEYW,NOLNMESH,1
   ans_sendcommand )KEYW,NOARMESH,1
   ans_sendcommand )KEYW,NOELEMS,1
   ans_sendcommand )*GET,_z1,ELEM,,COUNT
   ans_sendcommand )*IF,_z1,NE,0,THEN !{
   ans_sendcommand )CM,_ELEMCM,ELEM             ! Find if contact/target elems exist
   ans_sendcommand )ESEL,S,ENAME,,169,174
   ans_sendcommand )*GET,_z1,ELEM,,COUNT
   ans_sendcommand )CMSEL,S,_ELEMCM
   ans_sendcommand )CMDEL,_ELEMCM
   ans_sendcommand )KEYW,CNTCELEM,0
   ans_sendcommand )*IF,_z1,GT,0,THEN !{
   ans_sendcommand )KEYW,CNTCELEM,1             ! Contact elements defined
   ans_sendcommand )*ENDIF !}
   ans_sendcommand )*ENDIF !}
   ans_sendcommand )! Determine if there is a mesh
   ans_sendcommand )_z1=lsinqr(0,14)  ! are there any lines
   ans_sendcommand )*IF,_z1,GT,0,THEN !{
   ans_sendcommand )*DEL,_l1
   ans_sendcommand )*DEL,_l2
   ans_sendcommand )*DIM,_l1,,_z1
   ans_sendcommand )*DIM,_l2,,_z1
   ans_sendcommand )*GET,_z2,COMMON,,ERRCOM,,INT,6   ! Get the value of /NERR
   ans_sendcommand )/NERR,0
   ans_sendcommand )*VGET,_l1(1),LINE,1,ATTR,NDIV
   ans_sendcommand )/NERR,_z2
   ans_sendcommand )*VFUN,_l2(1),PWR,_l1(1),2
   ans_sendcommand )*VSCFUN,_z1,SUM,_l2(1)
   ans_sendcommand )*IF,_z1,EQ,0,THEN !{
   ans_sendcommand )KEYW,NOLNMESH,1
   ans_sendcommand )*ELSE !}{
   ans_sendcommand )KEYW,NOLNMESH,0
   ans_sendcommand )*ENDIF  !}
   ans_sendcommand )*DEL,_l1
   ans_sendcommand )*DEL,_l2
   ans_sendcommand )_z1=arinqr(0,14)   ! Determine if there are areas meshed
   ans_sendcommand )*IF,_z1,GT,0,THEN  !{
   ans_sendcommand )*DEL,_l1
   ans_sendcommand )*DEL,_l2
   ans_sendcommand )*DIM,_l1,,_z1
   ans_sendcommand )*DIM,_l2,,_z1
   ans_sendcommand )*GET,_z2,COMMON,,ERRCOM,,INT,6   ! Get the value of /NERR
   ans_sendcommand )/NERR,0
   ans_sendcommand )*VGET,_l1(1),AREA,1,ATTR,NNOD
   ans_sendcommand )/NERR,_z2
   ans_sendcommand )*VFUN,_l2(1),PWR,_l1(1),2
   ans_sendcommand )*VSCFUN,_z1,SUM,_l2(1)
   ans_sendcommand )*IF,_z1,EQ,0,THEN  !{
   ans_sendcommand )KEYW,NOARMESH,1
   ans_sendcommand )*ELSE  !}{
   ans_sendcommand )KEYW,NOARMESH,0
   ans_sendcommand )*ENDIF  !}
   ans_sendcommand )*DEL,_l1
   ans_sendcommand )*DEL,_l2
   ans_sendcommand )*ENDIF  !}
   ans_sendcommand )_z1=elmiqr(0,14)  ! are there any elements
   ans_sendcommand )*IF,_z1,GT,0,THEN !{
   ans_sendcommand )KEYW,NOELEMS,0
   ans_sendcommand )*ENDIF  !}
   ans_sendcommand )*ELSE  !}{
   ans_sendcommand )_z1=elmiqr(0,14)  ! are there any elements
   ans_sendcommand )*IF,_z1,GT,0,THEN !{
   ans_sendcommand )KEYW,NOELEMS,0
   ans_sendcommand )*ENDIF  !}
   ans_sendcommand )*ENDIF  !}
   ans_sendcommand )/GO
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_CntcSurf) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PREP7)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list (PR_STRUC*pr_set)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Contact Pair"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_CntcSurf__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_CWz_Entry Fnc_CWz_ViewPair Fnc_CWz_DelePair"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_CntcSurf [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Cone) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 1 [list (mdl2d)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Cone"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Cone__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_CON4 Fnc_CONE"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Cone [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Contact_Controls) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (LSDYNA+PREP7)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Contact"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Contact_Controls__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_Params Fnc_DYNA_DefBox Fnc_DYNA_Contopt Fnc_DYNA_ConMore Fnc_DYNA_LisCont Fnc_DYNA_PltCont Fnc_DYNA_DelCon Fnc_DYNA_DeacCon Fnc_DYNA_ActCon"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Contact_Controls [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Copy) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Copy"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Copy__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_KGEN Fnc_LGEN Fnc_AGEN Fnc_VGEN Fnc_MSHC_l Fnc_MSHC_a Men_Copy_-Nodes- Men_Copy_-Elements-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Copy [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Copy_-Nodes-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Nodes"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Copy_-Nodes-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_NGEN_copy Fnc_NSCALE_copy"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Copy_-Nodes- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Copy_-Elements-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Elements"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Copy_-Elements-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_EGEN_copy Fnc_ENGEN"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Copy_-Elements- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Correlation) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PSDRANDM*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (FULL_ANS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Correlation"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Correlation__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_COVAL Fnc_QDVAL Fnc_CO_QD_eras Fnc_PSDWAV Fnc_PSDSPL"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Correlation [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_CoupCeqn) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (maghfe*(MAGHFE+MAGNOD+MAGEDG+MAGELC+PR_SET+PR_CFD+PR_MULTI))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Coupling / Ceqn"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_CoupCeqn__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Fnc_DYNA_Rigid {0 (LSDYNA)}} Fnc_CP_1b Fnc_CP_1a Fnc_CPLGEN Fnc_CPSGEN Fnc_CPINTF Fnc_CPCYC Fnc_CPDELE Fnc_CE Fnc_CESGEN Fnc_CECMOD Fnc_CEINTF Fnc_CERIG_P Fnc_CEDELE Fnc_RBE3"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_CoupCeqn [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_CrePath) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PREP7)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Path Operations"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_CrePath__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_PPATH_P7 Men_PATHDELETE Fnc_PATHPLOT Fnc_PATHRECALL Men_CrePath_-Store- Men_CrePath_-Retrieve-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_CrePath [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_CrePath_-Store-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Store"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_CrePath_-Store-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PATHSAVE"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_CrePath_-Store- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_CrePath_-Retrieve-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Retrieve"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_CrePath_-Retrieve-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PATHRESU"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_CrePath_-Retrieve- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_Create52) { args } {
   ans_sendcommand )/nopr
   ans_sendcommand )*create,ansuitmp
   ans_sendcommand )_z1=etyiqr(0,14)
   ans_sendcommand )keyw,xfemcrk,0
   ans_sendcommand )*do,_z2,1,_z1,1
   ans_sendcommand )_ztyp=etyiqr(_z2,-2)
   ans_sendcommand )*if,_ztyp,eq,182,then
   ans_sendcommand )keyw,xfemcrk,1
   ans_sendcommand )*endif
   ans_sendcommand )*enddo
   ans_sendcommand )*end
   ans_sendcommand )/inp,ansuitmp
   ans_sendcommand )/go
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Create52) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (priges)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Create"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Create52__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Keypoint Men_Create52_-Lines- Men_Create52_-Areas- {Men_Create52_-Volumes- {1 (mdl2d)}} Men_Nodes Men_Elements Fnc_CWz_Entry Men_Circuit Men_Crack Fnc_RACE Men_Transduc"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Create52 [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Create52_-Lines-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Lines"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Create52_-Lines-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Line Men_Arc Men_Spline Fnc_LFILLT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Create52_-Lines- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Create52_-Areas-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Areas"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Create52_-Areas-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Arb_Area Men_Rectangle Men_Circle Men_Polygon Fnc_AFILLT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Create52_-Areas- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Create52_-Volumes-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Volumes"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Create52_-Volumes-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Arb_Volume Men_Block Men_Cylinder Men_Prism Men_Sphere Men_Cone Fnc_TORUS"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Create52_-Volumes- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_Create53) { args } {
   ans_sendcommand )/nopr
   ans_sendcommand )*create,ansuitmp
   ans_sendcommand )_z1=etyiqr(0,14)
   ans_sendcommand )keyw,xfemcrk,0
   ans_sendcommand )*do,_z2,1,_z1,1
   ans_sendcommand )_ztyp=etyiqr(_z2,-2)
   ans_sendcommand )*if,_ztyp,eq,182,then
   ans_sendcommand )keyw,xfemcrk,1
   ans_sendcommand )*endif
   ans_sendcommand )*enddo
   ans_sendcommand )*end
   ans_sendcommand )/inp,ansuitmp
   ans_sendcommand )/go
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Create53) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PRIGES)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Create"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Create53__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_HPT_54 Men_Create53_-Primitives- Fnc_VA53 Men_Nodes Men_Elements Fnc_CWz_Entry Men_Circuit Men_Crack Fnc_RACE Men_Transduc"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Create53 [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Create53_-Primitives-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Primitives"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Create53_-Primitives-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BLC5_iges Fnc_CYL4_iges Fnc_CON4_iges Fnc_SPH4_iges"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Create53_-Primitives- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_CycPhase) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((POST1+RESULTS+CYCLIC)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Cyclic Phase"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_CycPhase__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_CycPhase_Sweep Fnc_CycPhase_Put Fnc_CycPhase_List Fnc_CycPhase_Get Fnc_CycPhase_Status Fnc_CycPhase_Clear"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_CycPhase [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Cylinder) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 1 [list (mdl2d)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Cylinder"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Cylinder__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_CYL4 Fnc_CYL4_hollow Fnc_CYL4_part Fnc_CYL5 Fnc_CYLIND"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Cylinder [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DMPEXT) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 1 [list (FULL_ANS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "DampExtract"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DMPEXT__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DMPEXT Fnc_DMPEXT_EIG"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DMPEXT [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNAPREP) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (LSDYNA*FULL_ANS)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "LS-DYNA Options"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNAPREP__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_Parts Fnc_DYNA_Assem Men_DYNA_IParts Men_Contact_Controls Men_DYNA_Cnstr {Men_DYNA_Veloc {0 (LSDYNA)}} Men_Solu_Load Men_Spotweld"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNAPREP [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNASOLU) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (LSDYNA*FULL_ANS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "LS-DYNA Controls"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNASOLU__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Default_Controls Men_File_Control Men_Local_CS Fnc_Step_Control Fnc_DYNA_MatProp Fnc_DYNA_Damp"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNASOLU [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNA_ALE) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (LSDYNA+SOLUTION)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "ALE Options"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNA_ALE__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_EDGC Fnc_DYNA_ALEDEal Fnc_DYNA_ALELSal"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNA_ALE [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNA_Accel) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (LSDYNA)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Acceleration CS"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNA_Accel__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_App_Coriolis Fnc_del_Coriolis"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNA_Accel [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNA_AdptMsh) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (LSDYNA+SOLUTION)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Adaptive Meshing"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNA_AdptMsh__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_Edadapt Fnc_DYNA_AdList Fnc_DYNA_EDAC"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNA_AdptMsh [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNA_Cnstr) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (LSDYNA)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Constraints"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNA_Cnstr__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_DYNapplyDisp Men_DYNDelDisp Fnc_DYNexport"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNA_Cnstr [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNA_Curve) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (LSDYNA*FULL_ANS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Curve Options"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNA_Curve__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_CurvAdd Fnc_DYNA_CurvDel Fnc_DYNA_CurvLis Fnc_DYNA_CurvPlt"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNA_Curve [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNA_EDTER) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (LSDYNA*FULL_ANS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Criteria to Stop"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNA_EDTER__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_EDTERnd Fnc_DYNA_EDTERpt Fnc_DYNA_EDTERls"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNA_EDTER [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNA_Files) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (LSDYNA)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Input File/Parts"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNA_Files__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_Input Fnc_DYNA_Parts"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNA_Files [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNA_Hgl) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (LSDYNA)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Hourglass Ctrls"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNA_Hgl__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_Hourgls Fnc_DYNA_MatProp"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNA_Hgl [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNA_IParts) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (LSDYNA*FULL_ANS)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Inertia Options"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNA_IParts__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_EDIPART_def Fnc_EDIPART_lis Fnc_EDIPART_del"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNA_IParts [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNA_OutCtrl) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((LSDYNA*FULL_ANS)+SOLUTION)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Output Controls"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNA_OutCtrl__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_Edopt Men_DYNA_RstHt Fnc_DYNA_Edout Fnc_DYNA_Edhist Fnc_DYNA_Edint"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNA_OutCtrl [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNA_Read) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Read LSDYNA Data"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNA_Read__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_GLREAD Fnc_MATREAD Fnc_SPCREAD Fnc_RCREAD Fnc_SLREAD Fnc_RBREAD Fnc_NDREAD"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNA_Read [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNA_RstHt) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((LSDYNA*FULL_ANS)+SOLUTION)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "File Output Freq"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNA_RstHt__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_RstHt Fnc_DYNA_RstHtDt"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNA_RstHt [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNA_TimeCon) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((LSDYNA*FULL_ANS)+SOLUTION)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Time Controls"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNA_TimeCon__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_Term Fnc_EDTIMSTP Fnc_DYNA_Scale Fnc_DYNA_Subcycl"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNA_TimeCon [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNA_Veloc) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (LSDYNA)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Initial Velocity"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNA_Veloc__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_DYNA_Veloc_-OnNodes- Men_DYNA_Veloc_-OnParts-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNA_Veloc [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNA_Veloc_-OnNodes-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "On Nodes"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_DYNA_Veloc_-OnNodes-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_VelInpt Fnc_DYNA_VelGene Fnc_DYNA_VelDele Fnc_DYNA_VelList"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNA_Veloc_-OnNodes- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNA_Veloc_-OnParts-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "On Parts"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_DYNA_Veloc_-OnParts-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNApVelInpt Fnc_DYNApVelGene Fnc_DYNApVelDele Fnc_DYNApVelList"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNA_Veloc_-OnParts- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNA_dBND) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*pr_set)+(LSDYNA))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Symm Bndry Plane"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNA_dBND__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_adBND Fnc_DYNA_dBND"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNA_dBND [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNA_dEDNB) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*pr_set)+(LSDYNA))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Non-Refl Bndry"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNA_dEDNB__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_adEDNB Fnc_DYNA_dEDNB"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNA_dEDNB [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNA_dLoad) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (LSDYNA)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Delete Loads"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNA_dLoad__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_adLoad Fnc_DYNA_dLoad"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNA_dLoad [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNDelDisp) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*pr_set)+(LSDYNA))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Delete"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNDelDisp__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DKDELE_uva Fnc_DLDELE Fnc_DADELE Fnc_DDELE_uva Men_dDYNROT Men_DYNA_dBND Men_DYNA_dEDNB"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNDelDisp [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DYNapplyDisp) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*pr_set)+(LSDYNA))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (LINPLUS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Apply"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DYNapplyDisp__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DL_u Fnc_DA_u Fnc_DK_u Fnc_D_u Fnc_DYNROT Fnc_DYN_cnst Fnc_DL_symm_na Fnc_DL_symm Fnc_DA_symm Fnc_DYNA_BND Fnc_DYNA_EDNB Men_Local_CS Fnc_DL_asym_na Fnc_DL_asym Fnc_DA_asym"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DYNapplyDisp [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DecOpt) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Decimation Options"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DecOpt__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DecOpt Fnc_Dec_Stat"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DecOpt [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Default_Controls) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((LSDYNA*FULL_ANS)+SOLUTION)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Analysis Options"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Default_Controls__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_Start Fnc_DYNA_StrInit Fnc_DYNA_CPU Men_DYNA_EDTER Fnc_DYNA_Energy Fnc_DYNA_Relax Fnc_DYNA_Visco Men_DYNA_Hgl Men_DYNA_AdptMsh Men_DYNA_ALE Fnc_DYNA_Double Fnc_DYNA_Paralel"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Default_Controls [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DefineLoads) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Define Loads"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DefineLoads__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_LoadSettings Men_ApplyLoads Men_DeleteLoads Men_OperLoads {Fnc_DomainDcomp {0 (PARPERF)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DefineLoads [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Degen) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Show Degeneracy"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Degen__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ADGL Fnc_VDGL Fnc_APLOT_deg Fnc_VPLOT_deg"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Degen [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Degen_copy) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Show Degeneracy"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Degen_copy__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ADGL Fnc_VDGL Fnc_APLOT_deg Fnc_VPLOT_deg"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Degen_copy [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelAllLoads) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (PREP7*SOLUTION)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "All Load Data"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelAllLoads__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_LSCLEAR_all Fnc_LSCLEAR_soli Fnc_LSCLEAR_fe Fnc_LSCLEAR_iner Fnc_PSecLdDelAll Men_DelAllLoads_-AllConstraint- Men_DelAllLoads_-AllForces- Men_DelAllLoads_-AllSurfaceLd- Men_DelAllLoads_-AllBodyLoads-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelAllLoads [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelAllLoads_-AllConstraint-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "All Constraint"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_DelAllLoads_-AllConstraint-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DKDELE_all Fnc_DLDELE_all Fnc_DADELE_all Fnc_DDELE_all Fnc_DJDELE_all"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelAllLoads_-AllConstraint- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelAllLoads_-AllForces-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "All Forces"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_DelAllLoads_-AllForces-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FKDELE_all Fnc_FDELE_all Fnc_FJDELE_all"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelAllLoads_-AllForces- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelAllLoads_-AllSurfaceLd-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "All Surface Ld"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_DelAllLoads_-AllSurfaceLd-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFLDELE_all Fnc_SFADELE_all Fnc_SFEDELE_all"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelAllLoads_-AllSurfaceLd- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelAllLoads_-AllBodyLoads-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "All Body Loads"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_DelAllLoads_-AllBodyLoads-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFLDELE_all Fnc_BFADELE_all Fnc_BFVDELE_all Fnc_BFKDELE_all Fnc_BFDELE_all Fnc_BFEDELE_all"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelAllLoads_-AllBodyLoads- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelAngAccel) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*PR_FLUID*PR_CFD*pr_set) + (lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*FLUID*CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+(cfd*NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Angular Accel"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelAngAccel__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DOMEGA_dele Fnc_CMDOMEGA_dele"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelAngAccel [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelAngVeloc) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*PR_FLUID*PR_CFD*pr_set) + (lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*FLUID*CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+(cfd*NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Angular Veloc"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelAngVeloc__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_OMEGA_dele Fnc_CMOMEGA_dele"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelAngVeloc [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelConvect) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_THERM*PR_FLUID*PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (THERMAL*FLUID*CFD*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Convection"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelConvect__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFLDELE_conv Fnc_SFADELE_conv Fnc_SFDELE_conv Fnc_SFEDEL_conv"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelConvect [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelDisplace) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*pr_set)+(lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Displacement"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelDisplace__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DKDELE_uva Fnc_DLDELE Fnc_DADELE Fnc_DDELE_uva Fnc_DDELE_uvaCM Fnc_DJDE_joint"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelDisplace [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelElecExcit) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_ELMAG*pr_set*PR_MULTI*(PR_THERM+ELECTRIC))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (ELECTRIC+vfed)*CIRC*ELECSTAT*TIMEINTP*EDGEELC*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (ELECMAG*THERMAL)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Excitation"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelElecExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_-AppCurrent- Fnc_-ImprCurr- Fnc_-AppCharge- Fnc_-AppCharDens- Fnc_-AppSurfChar- Fnc_-DelElecField-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelElecExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppCurrent-_HEADMen_DelElecExcit) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppCurrent"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppCurrent-_HEADMen_DelElecExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FKDELE_amps Fnc_FDELE_amps"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppCurrent-_HEADMen_DelElecExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-ImprCurr-_HEADMen_DelElecExcit) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-ImprCurr"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-ImprCurr-_HEADMen_DelElecExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FKDELE_ic Fnc_FDELE_ic"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-ImprCurr-_HEADMen_DelElecExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppCharge-_HEADMen_DelElecExcit) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppCharge"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppCharge-_HEADMen_DelElecExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FKDELE_chrg Fnc_FDELE_chrg"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppCharge-_HEADMen_DelElecExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppCharDens-_HEADMen_DelElecExcit) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppCharDens"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppCharDens-_HEADMen_DelElecExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFLDELE_chrg Fnc_BFADELE_chrg Fnc_BFVDELE_chrg Fnc_BFKDELE_chrg Fnc_BFDELE_chrg Fnc_BFEDELE_chrg"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppCharDens-_HEADMen_DelElecExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppSurfChar-_HEADMen_DelElecExcit) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppSurfChar"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppSurfChar-_HEADMen_DelElecExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFLDELE_chrg Fnc_SFADELE_chrg Fnc_SFDELE_chrg Fnc_SFEDEL_chrg"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppSurfChar-_HEADMen_DelElecExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-DelElecField-_HEADMen_DelElecExcit) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-DelElecField"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-DelElecField-_HEADMen_DelElecExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFLDELE_ef Fnc_BFADELE_ef Fnc_BFDELE_ef"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-DelElecField-_HEADMen_DelElecExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelElecFlag) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_ELMAG*pr_set*PR_MULTI*(PR_THERM+ELECTRIC))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((ELECTRIC+vfed)*CIRC*ELECSTAT*TIMEINTP*EDGEELC*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (ELECMAG*THERMAL)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Flag"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelElecFlag__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_-AppInfinite- Fnc_-AppMaxwell-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelElecFlag [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppInfinite-_HEADMen_DelElecFlag) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppInfinite"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppInfinite-_HEADMen_DelElecFlag__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFLDELE_inf Fnc_SFADELE_inf Fnc_SFDELE_inf Fnc_SFEDEL_inf"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppInfinite-_HEADMen_DelElecFlag [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppMaxwell-_HEADMen_DelElecFlag) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppMaxwell"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppMaxwell-_HEADMen_DelElecFlag__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFLDELE_mxwf Fnc_SFADELE_mxwf Fnc_SFDELE_mxwf Fnc_SFEDEL_mxwf"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppMaxwell-_HEADMen_DelElecFlag [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelElecPoten) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_ELMAG*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (ELECTRIC*ELECSTAT*TIMEINTP*EDGEELC*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Boundary"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelElecPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_-AppImped_E- Fnc_-AppShield- Fnc_-Voltage- Fnc_-TimeInt- Fnc_-PerfEC- Fnc_-PMLOpt- Men_DelEmagTemp"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelElecPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppImped_E-_HEADMen_DelElecPoten) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppImped_E"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppImped_E-_HEADMen_DelElecPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFADELE_impE Fnc_SFDELE_impdE Fnc_SFEDEL_impdE"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppImped_E-_HEADMen_DelElecPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppShield-_HEADMen_DelElecPoten) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppShield"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppShield-_HEADMen_DelElecPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFADELE_shld Fnc_SFDELE_shld"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppShield-_HEADMen_DelElecPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-Voltage-_HEADMen_DelElecPoten) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-Voltage"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-Voltage-_HEADMen_DelElecPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DKDELE_volt Fnc_DDELE_volt Fnc_DLDELE_volt Fnc_DADELE_volt"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-Voltage-_HEADMen_DelElecPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-TimeInt-_HEADMen_DelElecPoten) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-TimeInt"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-TimeInt-_HEADMen_DelElecPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DKDELE_ti Fnc_DDELE_ti Fnc_DADELE_ti"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-TimeInt-_HEADMen_DelElecPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-PerfEC-_HEADMen_DelElecPoten) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-PerfEC"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-PerfEC-_HEADMen_DelElecPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DLDELE_pec Fnc_DADELE_pec Fnc_DDELE_pec"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-PerfEC-_HEADMen_DelElecPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-PMLOpt-_HEADMen_DelElecPoten) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-PMLOpt"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-PMLOpt-_HEADMen_DelElecPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PMLPAR_CL0 Fnc_PMLPAR_CL1"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-PMLOpt-_HEADMen_DelElecPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelEmagTemp) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((ELECTRIC+ELECSTAT*EDGEELC*QUASISTA)*(MAGNETIC+thermal)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Temperature"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelEmagTemp__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_EM_BFLDELE_temp Fnc_EM_BFADELE_temp Fnc_EM_BFVDELE_temp Fnc_EM_BFKDELE_temp Fnc_EM_BFDELE_temp Fnc_EM_BFEDELE_temp"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelEmagTemp [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelFSI) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_FLUID*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (FLUID*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Field Surface"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelFSI__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFLDELE_fsi Fnc_SFADELE_fsi Fnc_SFDELE_fsi"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelFSI [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelFlPrsANS) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_FLUID*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (FLUID*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Pressure DOF"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelFlPrsANS__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DKDELE_pres Fnc_DLDELE_pres Fnc_DADELE_pres Fnc_DDELE_pres"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelFlPrsANS [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelFlowANS) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_FLUID*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (FLUID*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Flow"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelFlowANS__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FKDELE_flow_a Fnc_FDELE_flow_a"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelFlowANS [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelFluidDisp) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (CFD*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Displacement"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelFluidDisp__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DKDELE_uva Fnc_DLDELE Fnc_DADELE Fnc_DDELE_uva"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelFluidDisp [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelFluidPres) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (CFD*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Pressure DOF"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelFluidPres__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DKDELE_pres Fnc_DLDELE_pres Fnc_DADELE_pres Fnc_DDELE_pres"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelFluidPres [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelFluidVel) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (CFD*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Velocity"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelFluidVel__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DKDELE_uva Fnc_DLDELE_v Fnc_DADELE_v Fnc_DDELE_uva"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelFluidVel [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelForce) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*pr_set) + (lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Force/Moment"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelForce__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FKDELE_fm Fnc_FDELE_fm Fnc_FDELE_fmCM Fnc_FJDE_joint"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelForce [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelHeatFlow) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_THERM*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (THERMAL*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Heat Flow"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelHeatFlow__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FKDELE_heat Fnc_FDELE_heat"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelHeatFlow [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelHeatFlux) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_THERM*PR_FLUID*PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (THERMAL*FLUID*CFD*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Heat Flux"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelHeatFlux__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFLDELE_hflu Fnc_SFADELE_hflu Fnc_SFDELE_hflu Fnc_SFEDEL_hflu"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelHeatFlux [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelHeatGen) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_THERM*PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (THERMAL*CFD*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Heat Generat"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelHeatGen__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFLDELE_hgen Fnc_BFADELE_hgen Fnc_BFVDELE_hgen Fnc_BFKDELE_hgen Fnc_BFDELE_hgen Fnc_BFEDELE_hgen"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelHeatGen [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelHeatGenANS) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_FLUID*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (FLUID*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Heat Generat"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelHeatGenANS__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFKDELE_hgen Fnc_BFDELE_hgen Fnc_BFEDELE_hgen"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelHeatGenANS [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelHeatGenCFD) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (CFD*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Heat Generat"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelHeatGenCFD__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFADELE_hgen Fnc_BFVDELE_hgen Fnc_BFDELE_hgen Fnc_BFEDELE_hgen"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelHeatGenCFD [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelImpedance) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (pr_set*PR_FLUID)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (FLUID*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Impedance"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelImpedance__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFLDELE_impd Fnc_SFADELE_impd Fnc_SFDELE_impd Fnc_SFEDEL_impd"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelImpedance [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelLoadVect) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (pmethod*elecstat)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (LINPLUS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Load Vector"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelLoadVect__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFEDELE_selv Fnc_LVSCALE_dele Fnc_LVSCALE_del_psd Fnc_RMLVSCALE_dele"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelLoadVect [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelMagExcit) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_ELMAG*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((MAGNETIC)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Excitation"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelMagExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_-DelCurrDens- Fnc_-DelMagField- Fnc_-AppVoltDrop-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelMagExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-DelCurrDens-_HEADMen_DelMagExcit) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-DelCurrDens"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-DelCurrDens-_HEADMen_DelMagExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFLDELE_js Fnc_BFADELE_js Fnc_BFVDELE_js Fnc_BFKDELE_js Fnc_BFDELE_js Fnc_BFEDELE_js"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-DelCurrDens-_HEADMen_DelMagExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-DelMagField-_HEADMen_DelMagExcit) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-DelMagField"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-DelMagField-_HEADMen_DelMagExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFADELE_h Fnc_BFDELE_h"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-DelMagField-_HEADMen_DelMagExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppVoltDrop-_HEADMen_DelMagExcit) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppVoltDrop"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppVoltDrop-_HEADMen_DelMagExcit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFADELE_vltg Fnc_BFVDELE_vltg Fnc_BFEDELE_vltg"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppVoltDrop-_HEADMen_DelMagExcit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelMagFlag) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_ELMAG*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((MAGNETIC+edgeelc+edgeflx)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Flag"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelMagFlag__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_-AppInfinite- Fnc_-AppMCI-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelMagFlag [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppInfinite-_HEADMen_DelMagFlag) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppInfinite"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppInfinite-_HEADMen_DelMagFlag__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFLDELE_inf Fnc_SFADELE_inf Fnc_SFDELE_inf Fnc_SFEDEL_inf"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppInfinite-_HEADMen_DelMagFlag [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppMCI-_HEADMen_DelMagFlag) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppMCI"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppMCI-_HEADMen_DelMagFlag__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFADELE_mci Fnc_SFDELE_mci Fnc_SFEDEL_mci"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppMCI-_HEADMen_DelMagFlag [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelMagMisc) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_ELMAG*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((MAGNETIC+edgeelc)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Other"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelMagMisc__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_-AppMagFlux- Fnc_-AppCurrSeg- Fnc_-AppMaxwell- Fnc_-AppVirtDisp-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelMagMisc [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppMagFlux-_HEADMen_DelMagMisc) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppMagFlux"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppMagFlux-_HEADMen_DelMagMisc__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FKDELE_flux Fnc_FDELE_flux"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppMagFlux-_HEADMen_DelMagMisc [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppCurrSeg-_HEADMen_DelMagMisc) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppCurrSeg"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppCurrSeg-_HEADMen_DelMagMisc__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FKDELE_csg Fnc_FDELE_csg"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppCurrSeg-_HEADMen_DelMagMisc [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppMaxwell-_HEADMen_DelMagMisc) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppMaxwell"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppMaxwell-_HEADMen_DelMagMisc__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFLDELE_mxwf Fnc_SFADELE_mxwf Fnc_SFDELE_mxwf Fnc_SFEDEL_mxwf"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppMaxwell-_HEADMen_DelMagMisc [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-AppVirtDisp-_HEADMen_DelMagMisc) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-AppVirtDisp"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-AppVirtDisp-_HEADMen_DelMagMisc__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFKDELE_mvdi Fnc_BFDELE_mvdi"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-AppVirtDisp-_HEADMen_DelMagMisc [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelMagPoten) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_ELMAG*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((MAGNETIC+edgeelc)*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Boundary"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelMagPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_-ScalarPot- Fnc_-VectorPot- Fnc_-EdgeMVP- Men_DelEmagTemp"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelMagPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-ScalarPot-_HEADMen_DelMagPoten) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-ScalarPot"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-ScalarPot-_HEADMen_DelMagPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DKDELE_mag Fnc_DDELE_mag Fnc_DADELE_mag"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-ScalarPot-_HEADMen_DelMagPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-VectorPot-_HEADMen_DelMagPoten) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-VectorPot"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-VectorPot-_HEADMen_DelMagPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DKDELE_a Fnc_DLDELE_a Fnc_DADELE_a Fnc_DDELE_a"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-VectorPot-_HEADMen_DelMagPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-EdgeMVP-_HEADMen_DelMagPoten) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-EdgeMVP"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-EdgeMVP-_HEADMen_DelMagPoten__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DADELE_azP Fnc_DDELE_azP"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-EdgeMVP-_HEADMen_DelMagPoten [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelNormVel) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_FLUID*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((FLUID+TFILM)*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Normal Velo"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelNormVel__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFADE_norm_v Fnc_BFEDE_norm_v"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelNormVel [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelOtherStru) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*PR_FLUID*PR_CFD*pr_set) + (lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*FLUID*CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Other"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelOtherStru__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_DelOtherStru_-Fluence-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelOtherStru [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelOtherStru_-Fluence-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fluence"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_DelOtherStru_-Fluence-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFLDELE_flue Fnc_BFADELE_flue Fnc_BFVDELE_flue Fnc_BFKDELE_flue Fnc_BFDELE_flue Fnc_BFEDELE_flue"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelOtherStru_-Fluence- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelPressure) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*pr_set) + (lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Pressure"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelPressure__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFLDELE_pres Fnc_SFADELE_pres Fnc_SFDELE_pres Fnc_SFDELE_prCM Fnc_SFEDEL_pres Fnc_SFEDEL_prCM"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelPressure [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelRad) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (PREP7*SOLUTION)+(CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (THERMAL+FLOTRAN+LINPLUS+FULL_ANS)*(FLOTRAN)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Ambient Rad"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelRad__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFLDELE_rad Fnc_SFADELE_rad Fnc_SFDELE_rad Fnc_SFEDEL_rad"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelRad [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelRadiSF) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (PREP7*SOLUTION)+((RADSURF+THERMAL+cfd)*NOFILTER)]]} {
      return -code error
   }
   if {![ans_getfilter 1 [list (THERMAL)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Radiation"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelRadiSF__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFLDELE_rdmx Fnc_SFADELE_rdmx Fnc_SFDELE_rdmx Fnc_SFEDEL_rdmx"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelRadiSF [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelSpecies) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Species"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelSpecies__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DLDELE_spec Fnc_DADELE_spec Fnc_DDELE_spec"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelSpecies [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelSpectrum) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*pr_set) + lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((STRUCTRL+SPECTRUM)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Spectrum"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelSpectrum__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_-BasePSD- Fnc_-NodePSD- Fnc_-SinglPtFor- Fnc_-MultiPtBas- Fnc_-MultiPtNod-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelSpectrum [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-BasePSD-_HEADMen_DelSpectrum) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-BasePSD"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-BasePSD-_HEADMen_DelSpectrum__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DK_psd_dele Fnc_D_psd_dele"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-BasePSD-_HEADMen_DelSpectrum [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-NodePSD-_HEADMen_DelSpectrum) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-NodePSD"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-NodePSD-_HEADMen_DelSpectrum__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FKDELE_psd Fnc_FDELE_psd"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-NodePSD-_HEADMen_DelSpectrum [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-SinglPtFor-_HEADMen_DelSpectrum) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-SinglPtFor"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-SinglPtFor-_HEADMen_DelSpectrum__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FKDELE_sv Fnc_FDELE_sv"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-SinglPtFor-_HEADMen_DelSpectrum [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-MultiPtBas-_HEADMen_DelSpectrum) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-MultiPtBas"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-MultiPtBas-_HEADMen_DelSpectrum__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DK_mult_del Fnc_D_mult_del"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-MultiPtBas-_HEADMen_DelSpectrum [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-MultiPtNod-_HEADMen_DelSpectrum) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-MultiPtNod"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-MultiPtNod-_HEADMen_DelSpectrum__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FKDELE_mult Fnc_FDELE_multi"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-MultiPtNod-_HEADMen_DelSpectrum [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelStruInert) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*PR_FLUID*PR_CFD*pr_set) + (lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*FLUID*CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+(cfd*NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Inertia"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelStruInert__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_DelStruInert_-AngularVeloc- Men_DelStruInert_-AngularAccel- Fnc_ACEL_dele Fnc_Coriolis_del"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelStruInert [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelStruInert_-AngularVeloc-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Angular Veloc"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_DelStruInert_-AngularVeloc-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_OMEGA_dele Fnc_CMOMEGA_dele"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelStruInert_-AngularVeloc- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelStruInert_-AngularAccel-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Angular Accel"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_DelStruInert_-AngularAccel-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DOMEGA_dele Fnc_CMDOMEGA_dele"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelStruInert_-AngularAccel- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelStruTemp) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*pr_set) +(lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Temperature"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelStruTemp__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFLDELE_temp Fnc_BFADELE_temp Fnc_BFVDELE_temp Fnc_BFKDELE_temp Fnc_BFDELE_temp Fnc_BFDELE_teCM Fnc_BFEDELE_temp Fnc_BFEDELE_teCM"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelStruTemp [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelTemp) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_THERM*PR_FLUID*PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (THERMAL*FLUID*CFD*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Temperature"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelTemp__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DKDELE_temp Fnc_DLDELE_temp Fnc_DADELE_temp Fnc_DDELE_temp"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelTemp [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelTurb) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Turbulence"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelTurb__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DLDELE_turb Fnc_DADELE_turb Fnc_DDELE_turb"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelTurb [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelVolFracCFD) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (CFD*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Volume Fract"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DelVolFracCFD__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_DelVolFracCFD_-BoundLoads-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelVolFracCFD [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DelVolFracCFD_-BoundLoads-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Bound Loads"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_DelVolFracCFD_-BoundLoads-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFLDEL_vf Fnc_SFEDEL_vf"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DelVolFracCFD_-BoundLoads- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Delete) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Delete"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Delete__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_KDELE Fnc_HPTDELE Fnc_LDELE Fnc_LDELE_sweep Fnc_ADELE Fnc_ADELE_sweep Fnc_VDELE Fnc_VDELE_sweep Fnc_NDELE Fnc_EDELE Fnc_EDELE_pret Men_Delete_-DelConcats-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Delete [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Delete_-DelConcats-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Del Concats"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Delete_-DelConcats-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ACCAT_del Fnc_LCCAT_del"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Delete_-DelConcats- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DeleteLoads) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (PREP7*SOLUTION)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Delete"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DeleteLoads__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_DelAllLoads Men_StrucDelete Men_ThermDelete Men_MagDelete Men_ElecDelete Men_FLUIDDelete Men_FSIDelete Men_FVINDelete Fnc_DelInitCon Men_DelLoadVect"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DeleteLoads [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Diagnostics) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Diagnostics"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Diagnostics__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_NLDIAG"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Diagnostics [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Divide) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Divide"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Divide__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_VSBA_div Fnc_VSBW_div Fnc_ASBV_div Fnc_ASBA_div Fnc_ASBL_div Fnc_ASBW_div Fnc_LSBV_div Fnc_LSBA_div Fnc_LSBL_div Fnc_LSBW_div Fnc_LDIV_2 Fnc_LDIV Fnc_LDIV_opt Men_Divide_opt"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Divide [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Divide_opt) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "With Options"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Divide_opt__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_VSBA_div_opt Fnc_VSBW_div_opt Fnc_ASBV_div_opt Fnc_ASBA_div_opt Fnc_ASBL_div_opt Fnc_ASBW_div_opt Fnc_LSBV_div_opt Fnc_LSBA_div_opt Fnc_LSBL_div_opt Fnc_LSBW_div_opt"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Divide_opt [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DropTest) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Drop Test"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DropTest__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DropControl Fnc_DtSolve Fnc_DtAndyna Men_DtTimeHist"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DropTest [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_DtTimeHist) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (DROPPOST*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Time History"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_DtTimeHist__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DtTmHisPlot Fnc_DtTmHisPrnt"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_DtTimeHist [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ELBOW_endr) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Elbows"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ELBOW_endr__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ELBOW_all Fnc_ELBOW_node"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ELBOW_endr [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_EMASOLV) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION+ELECSTAT*(MAGNETIC+transient))*NOFILTER)+lsdyna]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((ELECSTAT*SCALARP*VECTORP*EDGEFLX*MAGEDG)*HARMONIC*EDGEELC*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Electromagnet"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_EMASOLV__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Men_EMASOLV_-StaticAnalysis- {0 ((STATIC+ELECSTAT*SCALARP*VECTORP*EDGEFLX*MAGEDG+harmonic)*NOFILTER)}} Men_EMASOLV_-HarmonicAnalys- Men_EMASOLV_-HFEmag-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_EMASOLV [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_EMASOLV_-StaticAnalysis-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Static Analysis"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_EMASOLV_-StaticAnalysis-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Fnc_EMA_STAN {0 (elecstat)}} {Fnc_INDMATR {0 (elecstat)}} {Fnc_CAPMATR {0 ((STATIC+ELECSTAT)*NOFILTER)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_EMASOLV_-StaticAnalysis- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_EMASOLV_-HarmonicAnalys-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Harmonic Analys"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_EMASOLV_-HarmonicAnalys-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Fnc_HMAGSOLV {0 (elecstat)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_EMASOLV_-HarmonicAnalys- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_EMASOLV_-HFEmag-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "HF Emag"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_EMASOLV_-HFEmag-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Fnc_EMA_HFEL {0 ((elecstat+HARMONIC+ELEM3D)*NOFILTER)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_EMASOLV_-HFEmag- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ENDRELEASE) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "End Releases"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ENDRELEASE__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_BEAM_endr Men_ELBOW_endr"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ENDRELEASE [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ESURFM) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Surf Effect"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ESURFM__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_ESURFM_-GenerlSurface- Men_ESURFM_-AttchtoFluid-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ESURFM [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ESURFM_-GenerlSurface-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Generl Surface"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ESURFM_-GenerlSurface-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ESURFN1 Fnc_ESURFN2"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ESURFM_-GenerlSurface- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ESURFM_-AttchtoFluid-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Attch to Fluid"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ESURFM_-AttchtoFluid-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ESURFL Fnc_ESURFA Fnc_ESURFN"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ESURFM_-AttchtoFluid- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ElecApply) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_ELMAG*pr_set*PR_MULTI*(PR_THERM+ELECTRIC))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (ELECTRIC+vfed)*CIRC*ELECSTAT*TIMEINTP*EDGEELC*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list (PREP7*SOLUTION)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Electric"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ElecApply__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_AppElecPoten Men_AppElecExcit Men_AppElecFlag"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ElecApply [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ElecDelete) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_ELMAG*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (ELECTRIC*ELECSTAT*TIMEINTP*EDGEELC*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Electric"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ElecDelete__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_DelElecPoten Men_DelElecExcit Men_DelElecFlag"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ElecDelete [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ElemPSMESH) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Pretensn Mesh"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ElemPSMESH__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PSME_en Fnc_PSME_seln Fnc_PSME_ln Fnc_PSME_an Fnc_PSME_vn Men_PSMESH_opt"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ElemPSMESH [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ElemTable) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((POST1+RESULTS)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Element Table"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ElemTable__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ETABLE Fnc_PLETAB Fnc_PRETAB Fnc_SABS Fnc_SSUM Fnc_SADD Fnc_SMULT Fnc_SMAX Fnc_SMIN Fnc_SEXP Fnc_VCROSS Fnc_VDOT Fnc_ETABLE_erase"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ElemTable [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ElemType) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Element Type"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ElemType__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ET Fnc_ETCHG Fnc_DOF Fnc_DOF_DEL Fnc_ETCONTROL"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ElemType [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Elements) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Elements"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Elements__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_MAT_TYPE_gen Men_Elements_-AutoNumbered- Men_Elements_-Surf/Contact- Men_Elements_-SpotWeld- Men_Elements_-Pretension- Men_Elements_-UserNumbered- Fnc_EWRITE Fnc_EREAD_ERRANG {Fnc_-Superelem- {1 (THERMAL*FULL_ANS)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Elements [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Elements_-AutoNumbered-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Auto Numbered"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Elements_-AutoNumbered-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_E Fnc_EINTF Fnc_EINTF_OFFSET"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Elements_-AutoNumbered- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Elements_-Surf/Contact-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Surf / Contact"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Elements_-Surf/Contact-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ESURF Men_ESURFM Fnc_Nd_Surf Fnc_InfAElm"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Elements_-Surf/Contact- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Elements_-SpotWeld-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "SpotWeld"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Elements_-SpotWeld-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_SWGEN Men_SWADD Fnc_SWLIST Fnc_SWDEL"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Elements_-SpotWeld- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Elements_-Pretension-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Pretension"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Elements_-Pretension-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_ElemPSMESH"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Elements_-Pretension- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Elements_-UserNumbered-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "User Numbered"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Elements_-UserNumbered-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_EN"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Elements_-UserNumbered- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-Superelem-_HEADMen_Elements) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-Superelem"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-Superelem-_HEADMen_Elements__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SE Fnc_SESYMM Fnc_SETRAN_geom Fnc_SETRAN_cs"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-Superelem-_HEADMen_Elements [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ExpPass) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (PREP7*SOLUTION+(pr_cfd+cfd+magnetic+electric)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (LINPLUS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "ExpansionPass"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ExpPass__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_ExpPass_-SingleExpand-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ExpPass [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ExpPass_-SingleExpand-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Single Expand"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ExpPass_-SingleExpand-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_EXPSOL_HREXP Fnc_EXPSOL_HREX2 Fnc_NUMEXP_HREXP Fnc_MXPAND Fnc_SEEXP"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ExpPass_-SingleExpand- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Extrude) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Extrude"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Extrude__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Fnc_EXTOPT {1 (mdl2d)}} Men_Extrude_-Areas- Men_Extrude_-Lines- Men_Extrude_-Keypoints-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Extrude [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Extrude_-Areas-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Areas"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Extrude_-Areas-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_VOFFST Fnc_VEXT Fnc_VROTAT Fnc_VDRAG"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Extrude_-Areas- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Extrude_-Lines-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Lines"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Extrude_-Lines-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_AROTAT Fnc_ADRAG"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Extrude_-Lines- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Extrude_-Keypoints-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Keypoints"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Extrude_-Keypoints-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_LROTAT Fnc_LDRAG"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Extrude_-Keypoints- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_FLUIDDelete) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_FLUID*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (FLUID*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Fluid/ANSYS"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_FLUIDDelete__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_DelFlPrsANS Men_DelFlowANS Men_DelFSI Men_DelImpedance Men_DelHeatGenANS Men_DelNormVel {Men_DelFreeSurf {0 (ALPHA)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_FLUIDDelete [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_FSI) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "FSI Set Up"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_FSI__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FSI_Options Fnc_FSI_Time Fnc_FSI_Iter Fnc_FSI_Conv Fnc_FSI_Relax Fnc_FSI_Restart Fnc_FSI_Stat"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_FSI [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_FSIDelete) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_THERM*PR_FLUID*PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (THERMAL*FLUID*CFD*STRUCTRL*NOFILTER)]]} {
      return -code error
   }
   if {![ans_getfilter 1 [list (THERMAL*FLOTRAN*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Field Surface Intr"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_FSIDelete__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFDELE_FSInt Fnc_SFEDELE_FSInt Fnc_SFLDELE_FSInt Fnc_SFADELE_FSInt"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_FSIDelete [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_FVINDelete) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Field Volume Intr"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_FVINDelete__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BFEDEL_FVIN"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_FVINDelete [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_FailCriteria) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((lsdyna+STRUCTRL)*NOFILTER)]]} {
      return -code error
   }
   if {![ans_getfilter 1 [list (LINPLUS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Failure Criteria"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_FailCriteria__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FCritTemp Fnc_FCritDef Fnc_FCritDele Fnc_FCritList Fnc_FCritChek"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_FailCriteria [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_FailureCrit) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Failure Crit"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_FailureCrit__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_TB_fail_mstn Fnc_TB_fail_msts Fnc_TB_fail_wu Fnc_TB_fail_ustn Fnc_TB_fail_usts Fnc_TB_fail_uwu Fnc_TB_fail_uoth"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_FailureCrit [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Fatigue) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_STRUC*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (POST1)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (LINPLUS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Fatigue"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Fatigue__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FTSIZE Men_Fatigue_-PropertyTable- Fnc_FL Fnc_FLLIST Men_Fatigue_-StoreStresses- Fnc_FE Fnc_FELIST Fnc_FE_erase Fnc_FTCALC Fnc_FTWRIT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Fatigue [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Fatigue_-PropertyTable-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Property Table"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Fatigue_-PropertyTable-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FP Fnc_FP_smt Fnc_FP_mn Fnc_FPLIST Fnc_FP_erase"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Fatigue_-PropertyTable- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Fatigue_-StoreStresses-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Store Stresses"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Fatigue_-StoreStresses-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FSNODE Fnc_FSSECT Fnc_FS Fnc_FSPLOT Fnc_FSLIST Fnc_FSDELE"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Fatigue_-StoreStresses- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_File_Control) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((LSDYNA*FULL_ANS)+SOLUTION)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "File Controls"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_File_Control__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_DYNA_Files Fnc_DYNA_Outopt Fnc_DYNA_Output Fnc_DYNA_Start Fnc_DYNA_History"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_File_Control [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_FluidApply) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_FLUID*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (FLUID*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list (PREP7*SOLUTION)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Fluid/ANSYS"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_FluidApply__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_AppFlPrsANS Men_AppFlowANS Men_AppFSI Men_AppImpedance Men_AppHeatGenANS Men_AppNormVel {Men_AppFreeSurf {0 (ALPHA)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_FluidApply [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_FluxNorma) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((SCALARP+edgeflx)*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Flux Normal"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_FluxNorma__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DA_magN Fnc_D_magNN"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_FluxNorma [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_FluxPMVP) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+(EDGEFLX*NOFILTER))]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Flux Par'l"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_FluxPMVP__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DA_azP Fnc_D_azP"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_FluxPMVP [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_GapCond) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUCTRL*pr_set) + lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((TRNSIENT+(REDUCED*MODESUP)+lstepgt1)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (LINPLUS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Dynamic Gap Cond"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_GapCond__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_GP Fnc_GPDELE Fnc_GPLIST_all Fnc_GPLIST"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_GapCond [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_GenlPost) { args } {
   ans_sendcommand )/nopr
   ans_sendcommand )*GET,_z1,common,,cycsym_com,,int,2
   ans_sendcommand )KEYWD,CYCLIC,0
   ans_sendcommand )KEYWD,CYCGEN,0
   ans_sendcommand )*IF,_z1,gt,1,then
   ans_sendcommand )KEYWD,CYCLIC,1
   ans_sendcommand )*ELSEIF,_modcyc,eq,1,then
   ans_sendcommand )KEYWD,CYCGEN,1
   ans_sendcommand )*ENDIF
   ans_sendcommand )KEYWORD,ROTKEY,0
   ans_sendcommand )*GET,_Z2,COMMON,,STEPCM,,INT,192
   ans_sendcommand )*IF,_Z2,EQ,1,THEN
   ans_sendcommand )KEYWORD,ROTKEY,1
   ans_sendcommand )*ENDIF
   ans_sendcommand )*GET,_Z2,COMMON,,STEPCM,,INT,198
   ans_sendcommand )*IF,_Z2,EQ,1,THEN
   ans_sendcommand )KEYWORD,ROTKEY,1
   ans_sendcommand )*ENDIF
   ans_sendcommand )!*get,_z1,active,,routin
   ans_sendcommand )!*if,_z1,ne,31,then
   ans_sendcommand /POST1
   ans_sendcommand )!*endif
   ans_sendcommand )/go
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_GenlPost) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "General Postproc"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_GenlPost__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_UVBA_P1_T1 Men_UVBA_P1_T2 Men_UVBA_P1_T3 Fnc_ReadOpts_p1 Fnc_SET_summary Fnc_SET_sum_ord Men_GenlPost_-ReadResults- Men_FailCriteria Men_PlotResults Men_ListResults Men_QuerResults Men_RotResults Fnc_OutOpts_p1 Fnc_ResultView Men_NodalCalcs Men_ElemTable Men_PathOper Men_SurfOper Men_LoadCase Men_ChkElmShape Fnc_RAPPND Men_ROM_Oper Men_ThinFilm_Oper {Men_PostCyc {0 (CYCLIC)}} Men_Submodel Men_MagCalcs Men_Fatigue Men_SafetyFact Men_GenlPost_-Define/Modify- Fnc_NLPOST Fnc_RESET_p1 Men_P1_-REZONE- Men_UVBA_P1_B1 Men_UVBA_P1_B2 Men_UVBA_P1_B3"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_GenlPost [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_GenlPost_-Define/Modify-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Define/Modify"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_GenlPost_-Define/Modify-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DNSOL Fnc_DESOL Fnc_DETAB"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_GenlPost_-Define/Modify- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_GenlPost_-ReadResults-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Read Results"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_GenlPost_-ReadResults-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SET_first Fnc_SET_next Fnc_SET_prev Fnc_SET_last Fnc_SET_list Fnc_SET_list_ord Fnc_SET_lstep Fnc_SET_time Fnc_SET_nset"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_GenlPost_-ReadResults- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Glue) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Glue"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Glue__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_VGLUE Fnc_AGLUE Fnc_LGLUE"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Glue [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_HARDPTA) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Hard PT on area"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_HARDPTA__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_HPTAC Fnc_HPTAP"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_HARDPTA [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_HARDPTA53) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Hard PT on area"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_HARDPTA53__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_HPTAC"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_HARDPTA53 [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_HARDPTL) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Hard PT on line"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_HARDPTL__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_HPTLR Fnc_HPTLC Fnc_HPTLP"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_HARDPTL [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_HARDPTL53) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Hard PT on line"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_HARDPTL53__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_HPTLR Fnc_HPTLC"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_HARDPTL53 [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_HPT_54) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Hard Points"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_HPT_54__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_HARDPTL53 Men_HARDPTA53"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_HPT_54 [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_InitialCond) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+(STRUCTRL*THERMAL*FLUID*ELECTRIC*MAGNETIC*CFD))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Initial Condit'n"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_InitialCond__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_IC_p Fnc_ICLIST_all Fnc_ICLIST Fnc_LDREAD_tempIC"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_InitialCond [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Intersect) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Intersect"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Intersect__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Intersect_-Common- Men_Intersect_-Pairwise- Fnc_AINV Fnc_LINV Fnc_LINA"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Intersect [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Intersect_-Common-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Common"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Intersect_-Common-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_VINV Fnc_AINA Fnc_LINL"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Intersect_-Common- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Intersect_-Pairwise-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Pairwise"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Intersect_-Pairwise-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_VINP Fnc_AINP Fnc_LINP"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Intersect_-Pairwise- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_J-Normal-T) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+(elem3d+edgeelc+TIMEINTP)*NOFILTER)]]} {
      return -code error
   }
   if {![ans_getfilter 1 [list (LINPLUS*THERMAL*ELECMAG)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "J-Normal"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_J-Normal-T__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_D_volt0_ti Fnc_DA_volt0_ti"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_J-Normal-T [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_J-Normal1) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PREP7*SOLUTION*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list (((ELECTRIC*ELECSTAT)+timeintp+edgeelc)*NOFILTER)]]} {
      return -code error
   }
   if {![ans_getfilter 1 [list (LINPLUS*THERMAL*ELECMAG)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "J-Normal"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_J-Normal1__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_D_volt0 Fnc_DL_volt0 Fnc_DA_volt0"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_J-Normal1 [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_KCEN) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "KP at center"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_KCEN__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_KCEN Fnc_KCENR Fnc_KCENL"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_KCEN [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Keypoint) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Keypoints"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Keypoint__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_K_p Fnc_K Fnc_KL Fnc_KLD Fnc_KNODE Fnc_KBET Fnc_KFILL Men_KCEN Men_HARDPTL Men_HARDPTA"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Keypoint [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Lay-up) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Lay-up"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Lay-up__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ShellAddEdit Fnc_SECPLOTshel"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Lay-up [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Line) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Lines"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Line__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_LSTR Fnc_L Fnc_LAREA Fnc_LTAN Fnc_L2TAN Fnc_LANG_90 Fnc_L2ANG_90 Fnc_LANG Fnc_L2ANG"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Line [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ListResults) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((POST1+RESULTS)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "List Results"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ListResults__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SET_detailed Fnc_SET_detl_ord Fnc_PRITER Fnc_PRERR Men_ListResults_-SortedListing- Fnc_PRNSOL Fnc_PRESOL Fnc_SEDLIS Fnc_SWDLIS Fnc_PRRSOL Fnc_PRNLD Fnc_PRETAB_dummy Fnc_PRVECT Fnc_PRPATH_dummy Fnc_PRSECT_dummy {Men_ListResults_-FieldExtension- {0 (ELECTRIC*MAGNETIC+EDGEELC)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ListResults [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ListResults_-FieldExtension-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Field Extension"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ListResults_-FieldExtension-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_RADAR_L Fnc_RADAR_NL Fnc_HFFAR_L Fnc_HFNEAR Fnc_ANTPAT_L Fnc_ANTDIR_L Fnc_ANTPRAD Fnc_ANTPGAIN Fnc_ANTEFF"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ListResults_-FieldExtension- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ListResults_-SortedListing-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Sorted Listing"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ListResults_-SortedListing-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_NSORT Fnc_NUSORT Fnc_ESORT Fnc_EUSORT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ListResults_-SortedListing- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_LoadCase) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((POST1)*(NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Load Case"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_LoadCase__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_LC_create Fnc_LCASE Fnc_LCWRITE Men_LoadCase_-CalcOptions- Fnc_LCOPER_add Fnc_LCOPER_sub Fnc_LCOPER_squa Fnc_LCOPER_sqrt Fnc_LCOPER_srss Fnc_LCOPER_mn_mx Fnc_LCOPER_lprin Fnc_LCDEF_stat Fnc_LCZERO Fnc_LCDEF_erase"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_LoadCase [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_LoadCase_-CalcOptions-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Calc Options"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_LoadCase_-CalcOptions-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_LCSEL Fnc_LCABS Fnc_LCFACT Fnc_STRSOPT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_LoadCase_-CalcOptions- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_LoadSettings) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (PREP7*SOLUTION)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Settings"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_LoadSettings__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_TUNIF Fnc_TREF {Men_LoadSettings_-ForSurfaceLd- {0 (elecstat)}} Men_LoadSettings_-ReplacevsAdd-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_LoadSettings [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_LoadSettings_-ForSurfaceLd-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "For Surface Ld"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_LoadSettings_-ForSurfaceLd-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SFGRAD Fnc_SFFUN"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_LoadSettings_-ForSurfaceLd- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_LoadSettings_-ReplacevsAdd-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Replace vs Add"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_LoadSettings_-ReplacevsAdd-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DCUM Fnc_FCUM Fnc_SFCUM Fnc_BFCUM Fnc_BFECUM Fnc_LSCLEAR_lfac Fnc_SMOOTH_data"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_LoadSettings_-ReplacevsAdd- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_LoadStepOpts) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Load Step Opts"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_LoadStepOpts__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Men_OutputCtrls {0 (lsdyna)}} {Fnc_SOLCONTROL {0 (lsdyna+((static+modal+buckling+trnsient)*SIMPLOFF))}} {Men_TimeFreq {0 (lsdyna+((static+buckling+trnsient)*SIMPLOFF*REDUCED*MODESUP))}} {Men_NonlinLSOpts {0 (lsdyna+((static+modal+buckling+trnsient)*SIMPLOFF))}} {Men_SpectrumOpts {0 (lsdyna+((static+modal+buckling+trnsient)*SIMPLOFF))}} {Men_ExpPass {0 (lsdyna+((static+trnsient)*SIMPLOFF*REDUCED*MODESUP))}} {Men_MagLSOpts {0 (lsdyna+((static+modal+buckling+trnsient)*SIMPLOFF))}} {Men_OtherLSOpts {0 (lsdyna+((buckling)*SIMPLOFF))}} {Fnc_WRFULL {0 (lsdyna)}} {Fnc_LSCLEAR_lsop {0 (lsdyna+((modal+buckling)*SIMPLOFF))}} {Fnc_LSREAD {0 (lsdyna+((modal+buckling)*SIMPLOFF))}} {Fnc_LSWRITE {0 (lsdyna+((modal+buckling)*SIMPLOFF))}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_LoadStepOpts [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Loads) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Loads"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Loads__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Analysis Men_MasterDOF Men_GapCond Men_DefineLoads {Men_LoadStepOpts {0 (lsdyna)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Loads [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Loads1) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list (LSDYNA)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Loads"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Loads1__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Loads1_-InitialCondtns- Men_Loads1_-Constraints- Fnc_DYNA_Load Fnc_LOADPLOT Fnc_EDFPLOT Fnc_EDNDTSD"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Loads1 [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Loads1_-InitialCondtns-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Initial Condtns"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Loads1_-InitialCondtns-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_DYNA_Veloc"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Loads1_-InitialCondtns- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Loads1_-Constraints-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Constraints"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Loads1_-Constraints-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_DYNapplyDisp Men_DYNDelDisp Fnc_DYNexport"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Loads1_-Constraints- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Local_CS) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (LSDYNA*FULL_ANS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Local CS"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Local_CS__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_Coord Fnc_DYNA_CSlist Fnc_DYNA_CSdele"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Local_CS [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MFMCC_Stagger) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Stagger"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MFMCC_Stagger__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_MFX_MaxIter Fnc_MFSUR_Converg Fnc_MFSUR_Relax"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MFMCC_Stagger [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_MFSET) { args } {
   ans_sendcommand )/NOPR
   ans_sendcommand )/GO
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MFSET) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 1 [list (FULL_ANS&LINPLUS&THERMAL&MULTDISC)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Multi-field Set Up"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MFSET__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_MFSET_KEY {Fnc_MFSCC {0 (MF)}} {Fnc_MFX_Ans_CFX {0 (MFAX)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MFSET [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_MFSET_Solu) { args } {
   ans_sendcommand )/NOPR
   ans_sendcommand )/GO
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MFSET_Solu) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 1 [list (FULL_ANS&LINPLUS&THERMAL&MULTDISC)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Multi-field Set Up"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MFSET_Solu__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_MFSET_KEY {Fnc_MFSCC_Solu {0 (MF)}} {Fnc_MFX_Ans_CFX {0 (MFAX)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MFSET_Solu [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MFS_Define) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Define"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MFS_Define__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_MFS_Definefield Fnc_MFS_Addelems"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MFS_Define [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MFS_MCCSetup) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Solution Ctrl"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MFS_MCCSetup__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_MFS_FieldGrp Fnc_MFS_MCCOrder"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MFS_MCCSetup [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MFS_SCCInterface) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Interface"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MFS_SCCInterface__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_MFS_Surface Fnc_MFS_Volume Fnc_MFS_Mapping"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MFS_SCCInterface [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MFS_SCCSetup) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Setup"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MFS_SCCSetup__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_MFS_SCCSetup Fnc_MFS_SCCOrder Fnc_MFS_Extern"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MFS_SCCSetup [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MFS_Stagger) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Stagger"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MFS_Stagger__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_MFS_MaxIter Fnc_MFS_Converg Fnc_MFS_Relax"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MFS_Stagger [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MFX_AC_Advanced) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Advanced Set Up"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MFX_AC_Advanced__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_MFX_MapSetup Fnc_MFX_MaxIter Fnc_MFSUR_Converg Fnc_MFSUR_Relax"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MFX_AC_Advanced [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MFX_AC_Interface) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Interface"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MFX_AC_Interface__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_MFX_AC_LoadComm"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MFX_AC_Interface [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MODCOM_dd) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+(DDAM*NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Mode Combine"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MODCOM_dd__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_MODCOM_CQC Fnc_MODCOM_GRP Fnc_MODCOM_DSUM Fnc_MODCOM_SRSS Fnc_MODCOM_NRLSM"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MODCOM_dd [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MODCOM_mp) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+(MULTIPNT*NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Mode Combine"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MODCOM_mp__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_MODCOM_CQC Fnc_MODCOM_GRP Fnc_MODCOM_DSUM Fnc_MODCOM_SRSS Fnc_MODCOM_NRLSM"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MODCOM_mp [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MODCOM_sp) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+(SINGLEPT*NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Mode Combine"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MODCOM_sp__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_MODCOM_CQC Fnc_MODCOM_GRP Fnc_MODCOM_DSUM Fnc_MODCOM_SRSS Fnc_MODCOM_NRLSM"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MODCOM_sp [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MP_Library) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Material Library"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MP_Library__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_/MPLIB Fnc_/MPLIB_STATUS Fnc_MPLib_Read Fnc_MPLib_Write Fnc_MPLib_UNITS2"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MP_Library [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MP_Library_copy) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Material Library"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MP_Library_copy__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_/MPLIB Fnc_/MPLIB_STATUS Fnc_MPLib_Read Fnc_MPLib_Write Fnc_MPLib_UNITS2"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MP_Library_copy [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MagApply) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_ELMAG*pr_set+pr_cfd*PR_ELMAG)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (MAGNETIC*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list (PREP7*SOLUTION)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Magnetic"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MagApply__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_AppMagPoten Men_AppMagExcit Men_AppMagFlag Men_AppMagMisc"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MagApply [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MagCalcs) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_ELMAG*pr_set)+(lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((POST1+RESULTS+(MAGNETIC*ELECTRIC)*NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (ELECMAG)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Elec&Mag Calc"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MagCalcs__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_MagCalcs_-ElementBased- Fnc_EMFTMAC Men_MagCalcs_-ComponentBased- Men_MagCalcs_-PathBased- Men_MagCalcs_-Port-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MagCalcs [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MagCalcs_-ElementBased-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Element Based"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_MagCalcs_-ElementBased-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SCENERGY Fnc_SENERGY Fnc_POWERH Fnc_EMAGERR Fnc_CURR2D"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MagCalcs_-ElementBased- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MagCalcs_-ComponentBased-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Component Based"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_MagCalcs_-ComponentBased-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FMAGSUM Fnc_TORQSUM Fnc_GMATRIX"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MagCalcs_-ComponentBased- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MagCalcs_-PathBased-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Path Based"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_MagCalcs_-PathBased-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FOR2D Fnc_TORQ2D Fnc_TORQC2D Fnc_FLUXV Fnc_MMF Fnc_EMF Fnc_IMPD"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MagCalcs_-PathBased- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MagCalcs_-Port-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Port"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_MagCalcs_-Port-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_REFLCOEF Fnc_FSSPARM"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MagCalcs_-Port- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MagDelete) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_ELMAG*pr_set+pr_cfd*PR_ELMAG)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((MAGNETIC+edgeelc)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Magnetic"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MagDelete__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_DelMagPoten Men_DelMagExcit Men_DelMagFlag Men_DelMagMisc"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MagDelete [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MagLSOpts) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (((PREP7*SOLUTION)+(cfd*NOFILTER))+lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((modal+SCALARP*(ELEM3D+EDGEFLX))*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (ELECMAG)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Magnetics"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MagLSOpts__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Fnc_-Options Only-}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MagLSOpts [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-OptionsOnly-_HEADMen_MagLSOpts) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-Options Only"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-OptionsOnly-_HEADMen_MagLSOpts__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_MAGOPT_rsp Fnc_MAGOPT_dsp Fnc_MAGOPT_gsp Fnc_BIOT Fnc_EMSYM Fnc_EDG_GAUGE"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-OptionsOnly-_HEADMen_MagLSOpts [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ManSizeAreas) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Areas"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ManSizeAreas__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_AESIZE Fnc_AESIZE_p Fnc_AESIZE_pdel"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ManSizeAreas [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ManSizeGlobal) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Global"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ManSizeGlobal__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ESIZE Fnc_ACNTRL Fnc_VCNTRL Fnc_DESIZE"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ManSizeGlobal [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ManSizeKeypoints) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Keypoints"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ManSizeKeypoints__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_KESIZE Fnc_KESIZE_p Fnc_KESIZE_pdel"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ManSizeKeypoints [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ManSizeLayers) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Layers"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ManSizeLayers__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_LELAYER_p Fnc_LELAYER_pdel"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ManSizeLayers [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ManSizeLines) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Lines"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ManSizeLines__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_LESIZE Fnc_LESIZE_p Fnc_LECOPY Fnc_LEFLIP Fnc_LESIZE_pdel"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ManSizeLines [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MapMshA) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (meshtool)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Mapped"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MapMshA__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_AMAP Fnc_AMESH4 Men_MapMshA_-Concatenate- Men_MapMshA_-DelConcats-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MapMshA [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MapMshA_-Concatenate-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Concatenate"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_MapMshA_-Concatenate-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_LCCAT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MapMshA_-Concatenate- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MapMshA_-DelConcats-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Del Concats"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_MapMshA_-DelConcats-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_LCCAT_del"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MapMshA_-DelConcats- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MapMshV) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (meshtool)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Mapped"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MapMshV__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_VMESH6 Men_MapMshV_-Concatenate- Men_MapMshV_-DelConcats-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MapMshV [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MapMshV_-Concatenate-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Concatenate"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_MapMshV_-Concatenate-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ACCAT Fnc_LCCAT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MapMshV_-Concatenate- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MapMshV_-DelConcats-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Del Concats"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_MapMshV_-DelConcats-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_LCCAT_del Fnc_ACCAT_del"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MapMshV_-DelConcats- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MapNewMesh) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((POST1+RESULTS)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Map to New Mesh"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MapNewMesh__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_CBDOF Fnc_BFINT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MapNewMesh [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_MasterDOF) { args } {
   ans_sendcommand )/NOPR
   ans_sendcommand )KEYW,CMS,0
   ans_sendcommand )*GET,_keycms,common,,cmssupelcom,,int,1
   ans_sendcommand )*IF,_keycms,EQ,1,THEN
   ans_sendcommand )KEYW,CMS,1
   ans_sendcommand )*ENDIF
   ans_sendcommand )/GO
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MasterDOF) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((PREP7*(SOLUTION+lstepgt1))+(REDUCED*SUBSTRUC*NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (LINPLUS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Master DOFs"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MasterDOF__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_M Fnc_MGEN Fnc_MDELE Fnc_MLIST_all Fnc_MLIST"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MasterDOF [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MatProp_solu) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PREP7*SOLUTION)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Change Mat Props"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MatProp_solu__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_MP_Library Fnc_TempUnits {Fnc_EMUNIT {0 (lsdyna)}} Fnc_EuidlMat Fnc_DYNA_Visco Men_DYNA_Hgl Fnc_DYNA_Damp Fnc_MPAMOD Men_Local_CS {Men_DYNA_Curve {1 (LINPLUS*ELECMAG)} {0 (lsdyna)}} Fnc_MPCHG Fnc_MPWRITE Fnc_MPREAD"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MatProp_solu [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Mat_TB) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 1 [list (LINPLUS*ELECMAG)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Data Tables"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Mat_TB__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_TB Fnc_TBTEMP Fnc_TB_edit Fnc_TB_status Fnc_TBCOPY Fnc_TBDELE Fnc_TBLIST Fnc_TBPLOT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Mat_TB [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Mat_mooney) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_STRUC*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 1 [list (FULL_ANS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Mooney-Rivlin"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Mat_mooney__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Fnc_TB_mooney {0 (lsdyna)}} {Fnc_*MOONEY {0 (lsdyna)}} Fnc_M_EVAL Fnc_*VPLO_choice"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Mat_mooney [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Mat_mooney_copy) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_STRUC*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 1 [list (FULL_ANS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Mooney-Rivlin"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Mat_mooney_copy__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Fnc_TB_mooney {0 (lsdyna)}} {Fnc_*MOONEY {0 (lsdyna)}} Fnc_M_EVAL Fnc_*VPLO_choice"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Mat_mooney_copy [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Material) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Material Props"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Material__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_MP_Library_copy Fnc_TempUnits {Fnc_EMUNIT {0 (lsdyna)}} Fnc_EuidlMat Fnc_DYNA_Visco Men_DYNA_Hgl Fnc_DYNA_Damp Fnc_MPAMOD Men_Local_CS Men_DYNA_Curve Fnc_MPCHG Men_FailCriteria Fnc_MPWRITE Fnc_MPREAD"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Material [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_Mesh) { args } {
   ans_sendcommand )/NOPR
   ans_sendcommand )*GET,_z1,ACTIVE,,KEYWORD,,MESHTOOL
   ans_sendcommand )*IF,_z1,eq,1,THEN
   ans_sendcommand )*create,ansuitmp
   ans_sendcommand )*msg,note,
   ans_sendcommand )Some functions of this menu cannot be used while the %/&
   ans_sendcommand )MeshTool is active.
   ans_sendcommand )*end
   ans_sendcommand )/input,ansuitmp
   ans_sendcommand )*ENDIF
   ans_sendcommand )/GO
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Mesh) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Mesh"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Mesh__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_KMESH_m Fnc_LMESH_m Men_Mesh_-Areas- Men_Mesh_-Volumes- Men_Mesh_-VolumeSweep- Men_Mesh_-TetMeshFrom- Men_Mesh_-InterfaceMesh-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Mesh [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Mesh_-Areas-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Areas"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Mesh_-Areas-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_MapMshA Fnc_AMESH_m Fnc_AMESHtar"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Mesh_-Areas- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Mesh_-Volumes-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Volumes"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Mesh_-Volumes-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_MapMshV Fnc_VMESH_m"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Mesh_-Volumes- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Mesh_-VolumeSweep-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Volume Sweep"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Mesh_-VolumeSweep-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_EXTOPT_vswe Fnc_VSWEEP_m"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Mesh_-VolumeSweep- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Mesh_-TetMeshFrom-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Tet Mesh From"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Mesh_-TetMeshFrom-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FVMESH"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Mesh_-TetMeshFrom- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Mesh_-InterfaceMesh-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Interface Mesh"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Mesh_-InterfaceMesh-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_IMESH2D Fnc_IMESH3D"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Mesh_-InterfaceMesh- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MeshAttrib) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Mesh Attributes"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MeshAttrib__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_MeshAttrib Fnc_KATT Fnc_KATT_p Fnc_LATT Fnc_LATT_p Fnc_AATT Fnc_AATT_p Fnc_VATT Fnc_VATT_p Men_VEOR"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MeshAttrib [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MeshConcat) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Concatenate"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MeshConcat__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_LCCAT_m Fnc_ACCAT_m Men_MeshConcat_-DelConcats-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MeshConcat [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MeshConcat_-DelConcats-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Del Concats"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_MeshConcat_-DelConcats-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ACCAT_del Fnc_LCCAT_del"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MeshConcat_-DelConcats- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Meshing) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Meshing"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Meshing__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_MeshAttrib Fnc_Mesh_tool Men_SizeCntrl Fnc_MshrOpts Men_MeshConcat Men_Mesh Men_Modify Men_Check_mesh Men_Clear"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Meshing [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Modeling) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Modeling"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Modeling__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Create52 Men_Create53 Men_Operate52 Men_Operate53 Men_Move Men_Copy Men_Reflect Men_Check_geom Men_Delete Men_PrepCyc Men_CMS Fnc_GSG Fnc_Geom"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Modeling [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Modify) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Modify Mesh"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Modify__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Modify_-RefineAt- Men_TetImprove Fnc_TCHG {Men_Modify_-PhysMorphing- {0 (PREP7+RESULTS)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Modify [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Modify_-RefineAt-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Refine At"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Modify_-RefineAt-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_NREF Fnc_EREF Fnc_KREF Fnc_LREF Fnc_AREF Fnc_EREF_ALL"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Modify_-RefineAt- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Modify_-PhysMorphing-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Phys Morphing"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Modify_-PhysMorphing-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_AMORPH Fnc_VMORPH Fnc_ELMORPH"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Modify_-PhysMorphing- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Move) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Move / Modify"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Move__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Move_-Keypoints- Fnc_LGEN_move Men_Move_-Areas- Fnc_VGEN_move Men_Move_-Nodes- Fnc_-RotateNode- Men_Move_-Elements- Men_Transfer_Coord Men_ReverseNorm"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Move [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Move_-Keypoints-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Keypoints"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Move_-Keypoints-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_KGEN_move Fnc_KMODIF Fnc_KMOVE"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Move_-Keypoints- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Move_-Areas-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Areas"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Move_-Areas-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_AGEN_move Fnc_ANORM"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Move_-Areas- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Move_-Nodes-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Nodes"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Move_-Nodes-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_NGEN_move Fnc_NMODIF Fnc_NSCALE_move Fnc_MOVE"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Move_-Nodes- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-RotateNode-_HEADMen_Move) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-RotateNode"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-RotateNode-_HEADMen_Move__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_To_Surf_Norm Fnc_NROTAT Fnc_NMODIF_ang Fnc_NANG"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-RotateNode-_HEADMen_Move [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Move_-Elements-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Elements"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Move_-Elements-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_EMODIF_attr Fnc_EMODIF_node Fnc_EMID_add Fnc_EMID_remove Fnc_ENORM Fnc_EORIENT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Move_-Elements- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MultiPhys) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Physics"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_MultiPhys__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_MultiPhys_-Environment- Men_MultiPhys_-CoupledSolvers-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MultiPhys [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MultiPhys_-Environment-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Environment"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_MultiPhys_-Environment-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_Phys_writ Fnc_Phys_read Fnc_Phys_stat Fnc_Phys_list Fnc_Phys_dele Fnc_Phys_clear"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MultiPhys_-Environment- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_MultiPhys_-CoupledSolvers-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Coupled Solvers"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_MultiPhys_-CoupledSolvers-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ESSOLV"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_MultiPhys_-CoupledSolvers- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_NodalCalcs) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((POST1+RESULTS)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Nodal Calcs"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_NodalCalcs__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_FSUM Fnc_NFORCE {Men_NodalCalcs_-SummationPt- {1 (LINPLUS)}} Fnc_KCALC Fnc_INTSRF"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_NodalCalcs [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_NodalCalcs_-SummationPt-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Summation Pt"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_NodalCalcs_-SummationPt-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SPOINT_node Fnc_SPOINT_xyz"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_NodalCalcs_-SummationPt- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_Nodes) { args } {
   ans_sendcommand )/nopr
   ans_sendcommand )*create,ansuitmp
   ans_sendcommand )_z1=etyiqr(0,14)
   ans_sendcommand )keyw,axissect,0
   ans_sendcommand )*do,_z2,1,_z1,1
   ans_sendcommand )_ztyp=etyiqr(_z2,-2)
   ans_sendcommand )*if,_ztyp,eq,272,or,_ztyp,eq,273,then
   ans_sendcommand )keyw,axissect,1
   ans_sendcommand )*endif
   ans_sendcommand )*enddo
   ans_sendcommand )*end
   ans_sendcommand )/inp,ansuitmp
   ans_sendcommand )/go
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Nodes) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Nodes"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Nodes__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_N_p Fnc_N Fnc_CENTER Fnc_NKPT Fnc_FILL Fnc_QUAD Fnc_NAXIS Fnc_-RotateNode- Fnc_NWRITE Fnc_NREAD_NRRANG"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Nodes [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-RotateNode-_HEADMen_Nodes) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-RotateNode"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-RotateNode-_HEADMen_Nodes__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_NROTAT Fnc_NMODIF_ang Fnc_NANG"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-RotateNode-_HEADMen_Nodes [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_NonlinLSOpts) { args } {
   ans_sendcommand )/NOPR
   ans_sendcommand )*GET,_z1,common,,anscom,,int,52
   ans_sendcommand )KEYW,NLCNTRL,_z1
   ans_sendcommand )/GO
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_NonlinLSOpts) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+(cfd)*(NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Nonlinear"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_NonlinLSOpts__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Fnc_CNVTOL_0 {0 (MAGNETIC+ELEM2D+structrl+thermal+cfd+fluid)}} {Fnc_CNVTOL_1 {0 (MAGNETIC+ELEM2D+structrl+thermal+cfd+fluid)}} {Fnc_CNVTOL_2 {0 (MAGNETIC+ELEM2D+structrl+thermal+cfd+fluid)}} {Fnc_CNVTOL_3 {0 (MAGNETIC+ELEM2D+structrl+thermal+cfd+fluid)}} {Fnc_CNVTOL_0 {0 (MAGNETIC+ELEM2D+(STRUCTRL*CFD)+THERMAL+fluid)}} {Fnc_CNVTOL_1 {0 (MAGNETIC+ELEM2D+(STRUCTRL*CFD)+THERMAL+fluid)}} {Fnc_CNVTOL_2 {0 (MAGNETIC+ELEM2D+(STRUCTRL*CFD)+THERMAL+fluid)}} {Fnc_CNVTOL_3 {0 (MAGNETIC+ELEM2D+(STRUCTRL*CFD)+THERMAL+fluid)}} {Fnc_CNVTOL {0 (magnetic*elem2d)}} Fnc_NEQIT Fnc_SOLC_VolChk Fnc_CRPLIM Fnc_Strain_Rate Fnc_LNSRCH Fnc_PRED Fnc_ARC_opts {Fnc_MONITOR {0 (magnetic+electric+fluid)}} {Fnc_CUTCONTROL {0 (magnetic+electric+fluid)}} {Fnc_OPNCONTROL {0 (magnetic+electric+fluid)}} {Fnc_RESCONTROL {0 (magnetic+electric+fluid)}} Fnc_NCNV"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_NonlinLSOpts [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_NumCtrl) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Numbering Ctrls"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_NumCtrl__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_NUMMRG Fnc_NUMCMP Fnc_NUMSTR Fnc_NUMSTR_defa Fnc_NUMSTR_stat Fnc_NUMOFF Men_Reorder"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_NumCtrl [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_OperLoads) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (PREP7*SOLUTION)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Operate"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_OperLoads__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_OperLoads_-ScaleFELoads- Men_OperLoads_-TransfertoFE- Fnc_LSDELE"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_OperLoads [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_OperLoads_-ScaleFELoads-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Scale FE Loads"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_OperLoads_-ScaleFELoads-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DSCALE Fnc_FSCALE Fnc_SFSCALE Fnc_BFSCALE Fnc_BFESCAL"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_OperLoads_-ScaleFELoads- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_OperLoads_-TransfertoFE-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Transfer to FE"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_OperLoads_-TransfertoFE-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SBCTRAN Fnc_DTRAN Fnc_FTRAN Fnc_SFTRAN Fnc_BFTRAN"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_OperLoads_-TransfertoFE- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Operate52) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (priges)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Operate"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Operate52__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Extrude Fnc_LEXTND Men_Operate52_-Booleans- Men_Scale Men_Sum"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Operate52 [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Operate52_-Booleans-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Booleans"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Operate52_-Booleans-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Intersect Men_Add Men_Subtract Men_Divide Men_Glue Men_Overlap Men_Partition Fnc_Bool_opts Men_Degen"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Operate52_-Booleans- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Operate53) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PRIGES)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Operate"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Operate53__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Operate53_-Divide- Men_Operate53_-Subract- Men_Operate53_-Add-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Operate53 [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Operate53_-Divide-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Divide"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Operate53_-Divide-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_VSBW_div_igs Fnc_ASBW_div_igs Fnc_LSBW_div_igs Fnc_ASBV_div_igs Fnc_LSBV_div_igs"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Operate53_-Divide- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Operate53_-Subract-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Subract"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Operate53_-Subract-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_VSBV_igs"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Operate53_-Subract- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Operate53_-Add-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Add"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Operate53_-Add-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_VADD_igs"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Operate53_-Add- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_OtherLSOpts) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION*NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Other"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_OtherLSOpts__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_MORPH_ON Fnc_TREF Fnc_KUSE Fnc_MODE {Men_OtherLSOpts_-BirthDeath- {1 (FULL_ANS)}} Fnc_CECMOD Men_ENDRELEASE Fnc_UPMOD Men_Real Men_MatProp_solu Fnc_USRCAL"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_OtherLSOpts [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_OtherLSOpts_-BirthDeath-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Birth & Death"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_OtherLSOpts_-BirthDeath-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_EALIVE Fnc_EKILL Fnc_ESTIF"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_OtherLSOpts_-BirthDeath- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_OutputCtrls) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+(cfd*NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Output Ctrls"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_OutputCtrls__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_OUTPR Fnc_/GST {Fnc_OUTRES {0 (lsdyna+((static+trnsient)*SIMPLOFF*REDUCED*MODESUP))}} Fnc_OUT_stat Fnc_IRLF_-1 Fnc_ERESX"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_OutputCtrls [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Overlap) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Overlap"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Overlap__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_VOVLAP Fnc_AOVLAP Fnc_LOVLAP"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Overlap [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_P26Circ) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Circuit"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_P26Circ__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_p26DefineVar"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_P26Circ [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PATHDELETE) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((POST1*PREP7)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Delete Path"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_PATHDELETE__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PATHDELNAM Fnc_PATHDELALL"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PATHDELETE [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PATH_ARC) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((POST1+RESULTS)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Archive Path"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_PATH_ARC__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_PATH_ARC_-Store- Men_PATH_ARC_-Retrieve-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PATH_ARC [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PATH_ARC_-Store-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Store"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_PATH_ARC_-Store-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PAGET_AR Fnc_PATHSAVE"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PATH_ARC_-Store- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PATH_ARC_-Retrieve-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Retrieve"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_PATH_ARC_-Retrieve-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PAPUT_AR Fnc_PATHRESU"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PATH_ARC_-Retrieve- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PD_Execute) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Run"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_PD_Execute__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_PD_Execute_-ExecSerial- Men_PD_Execute_-ExecParallel-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PD_Execute [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PD_Execute_-ExecSerial-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Exec Serial  "]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_PD_Execute_-ExecSerial-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PDEXE_ENTRYS"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PD_Execute_-ExecSerial- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PD_Execute_-ExecParallel-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Exec Parallel"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_PD_Execute_-ExecParallel-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PDEXE_PAR_HP Fnc_PDEXE_PAR_AF Fnc_PDEXE_ENTRYP"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PD_Execute_-ExecParallel- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PPATH) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((POST1+RESULTS)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Define Path"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_PPATH__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PPATH_Nd Fnc_PPATH_WP Fnc_PPATH_Lc Men_PPATH_-PathStatus- Fnc_PATHEDIT Fnc_PATHOPTS"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PPATH [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PPATH_-PathStatus-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Path Status"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_PPATH_-PathStatus-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PATHSTAT_1 Fnc_PATHSTAT_2"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PPATH_-PathStatus- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PPATH_P7) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PREP7)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Define Path"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_PPATH_P7__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PPATH_Nd Fnc_PPATH_WP Fnc_PPATH_Lc Men_PPATH_P7_-PathStatus- Fnc_PATHEDIT Fnc_PATHOPTS"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PPATH_P7 [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PPATH_P7_-PathStatus-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Path Status"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_PPATH_P7_-PathStatus-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PATHSTAT_1"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PPATH_P7_-PathStatus- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PSMESH_opt) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "With Options"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_PSMESH_opt__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_PSMESH_opt_-DivideatNode- Men_PSMESH_opt_-DivideatValu-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PSMESH_opt [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PSMESH_opt_-DivideatNode-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Divide at Node"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_PSMESH_opt_-DivideatNode-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PSME_eon Fnc_PSME_selon Fnc_PSME_lon Fnc_PSME_aon Fnc_PSME_von"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PSMESH_opt_-DivideatNode- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PSMESH_opt_-DivideatValu-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Divide at Valu"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_PSMESH_opt_-DivideatValu-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PSME_eov Fnc_PSME_selov Fnc_PSME_lov Fnc_PSME_aov Fnc_PSME_vov"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PSMESH_opt_-DivideatValu- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PSMESH_opt_copy) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "With Options"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_PSMESH_opt_copy__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_PSMESH_opt_copy_-DivideatNode- Men_PSMESH_opt_copy_-DivideatValu-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PSMESH_opt_copy [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PSMESH_opt_copy_-DivideatNode-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Divide at Node"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_PSMESH_opt_copy_-DivideatNode-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PSME_eon Fnc_PSME_selon Fnc_PSME_lon Fnc_PSME_aon Fnc_PSME_von"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PSMESH_opt_copy_-DivideatNode- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PSMESH_opt_copy_-DivideatValu-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Divide at Valu"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_PSMESH_opt_copy_-DivideatValu-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PSME_eov Fnc_PSME_selov Fnc_PSME_lov Fnc_PSME_aov Fnc_PSME_vov"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PSMESH_opt_copy_-DivideatValu- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Partition) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Partition"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Partition__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_VPTN Fnc_APTN Fnc_LPTN"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Partition [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PathOper) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((POST1+RESULTS)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Path Operations"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_PathOper__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_PPATH Men_PATHDELETE Fnc_PATHPLOT Fnc_PATHRECALL {Fnc_PDEF {0 (edgeelc)}} {Men_PathOper_-MapontoPath- {0 (EDGEELC)}} Men_PathOper_-PlotPathItem- Fnc_PLSECT Fnc_PRSECT Fnc_PCALC_add Fnc_PCALC_mult Fnc_PCALC_div Fnc_PCALC_exp Fnc_PCALC_deri Fnc_PCALC_intg Fnc_PCALC_cos Fnc_PCALC_sin Fnc_PCALC_acos Fnc_PCALC_asin Fnc_PCALC_log Fnc_PCROSS Fnc_PDOT Fnc_PVECT Men_PATH_ARC Fnc_PDEF_clear"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PathOper [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PathOper_-MapontoPath-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Map onto Path"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_PathOper_-MapontoPath-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PFEDEF Fnc_PHFDEF"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PathOper_-MapontoPath- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PathOper_-PlotPathItem-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Plot Path Item"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_PathOper_-PlotPathItem-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PLPATH Fnc_PLPAGM Fnc_PRPATH Fnc_PRANGE_p1"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PathOper_-PlotPathItem- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PiezoMatrice) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Piezo Matrices"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_PiezoMatrice__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_TB_piezo Fnc_TB_anel"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PiezoMatrice [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Plasticity) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Plasticity"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Plasticity__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_TB_bkin Fnc_TB_mkin Fnc_TB_biso Fnc_TB_miso Fnc_TB_dp Fnc_TB_anand Fnc_TB_melas Fnc_TB_user"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Plasticity [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PlotResults) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((POST1+RESULTS)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Plot Results"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_PlotResults__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PLDISP Men_PlotResults_-ContourPlot- Men_PlotResults_-VectorPlot- Men_PlotResults_-PlotPathItem- {Fnc_FlowTrace {1 (THERMAL*ELECMAG)}} Fnc_TRPOIN Fnc_TRPLIS Fnc_TRPDEL Fnc_TRTIME {Fnc_PLTRAC {0 (CFD+electric+magnetic)}} {Fnc_PLTRAC_EM {0 (cfd+ELECTRIC*MAGNETIC)}} {Fnc_-ConcPlot- {1 (FULL_ANS)}} {Men_PlotResults_-FieldExtension- {0 (ELECTRIC*MAGNETIC+EDGEELC)}} Men_PlotResults_-ThinFilm-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PlotResults [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PlotResults_-ContourPlot-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Contour Plot"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_PlotResults_-ContourPlot-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PLNSOL Fnc_PLESOL Fnc_PLETAB_dummy Fnc_PLLS Fnc_PLF2D"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PlotResults_-ContourPlot- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PlotResults_-VectorPlot-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Vector Plot"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_PlotResults_-VectorPlot-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PLVECT Fnc_PLVECT_user"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PlotResults_-VectorPlot- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PlotResults_-PlotPathItem-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Plot Path Item"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_PlotResults_-PlotPathItem-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PLPATH Fnc_PLPAGM Fnc_PLSECT_dummy"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PlotResults_-PlotPathItem- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-ConcPlot-_HEADMen_PlotResults) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-ConcPlot"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-ConcPlot-_HEADMen_PlotResults__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PLCRACK"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-ConcPlot-_HEADMen_PlotResults [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PlotResults_-FieldExtension-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Field Extension"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_PlotResults_-FieldExtension-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_RADAR Fnc_RADAR_N Fnc_HFFAR Fnc_ANTPAT Fnc_ANTDIR"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PlotResults_-FieldExtension- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PlotResults_-ThinFilm-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "ThinFilm"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_PlotResults_-ThinFilm-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_MDPLOT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PlotResults_-ThinFilm- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Polygon) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Polygon"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Polygon__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_RPR4_2d Fnc_RPR4_4_2d Fnc_RPR4_5_2d Fnc_RPR4_6_2d Fnc_RPR4_7_2d Fnc_RPR4_8_2d Fnc_RPOLY_minor Fnc_RPOLY_major Fnc_RPOLY Fnc_PRI2_2d"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Polygon [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PostCyc) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (POST1+CYCLIC)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Cyclic Analysis"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_PostCyc__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_/CYCEXPAND Men_CycPhase"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PostCyc [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_PrepCyc) { args } {
   ans_sendcommand )/nopr
   ans_sendcommand )*GET,_z1,common,,cycsym_com,,int,2
   ans_sendcommand )KEYWD,CYCLIC,0
   ans_sendcommand )KEYWD,CYCGEN,0
   ans_sendcommand )*IF,_z1,gt,1,then
   ans_sendcommand )KEYWD,CYCLIC,1
   ans_sendcommand )*ELSEIF,_modcyc,eq,1,then
   ans_sendcommand )KEYWD,CYCGEN,1
   ans_sendcommand )*ENDIF
   ans_sendcommand )/go
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PrepCyc) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (pr_set*PR_MULTI*PR_STRUC)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Cyclic Sector"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_PrepCyc__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_PrepCyc_-CyclicModel- Fnc_CYCLICOFF Fnc_CYCLICUNDO Fnc_/CYCEXPAND Fnc_CYCOPT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PrepCyc [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_PrepCyc_-CyclicModel-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Cyclic Model"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_PrepCyc_-CyclicModel-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_CYCLICMAN Fnc_CYCLICAUTO Fnc_CYCLICSTAT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_PrepCyc_-CyclicModel- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_Preproc) { args } {
   ans_sendcommand )/nopr
   ans_sendcommand )!*get,_z1,active,,routin
   ans_sendcommand )!*IF,_z1,NE,17,THEN
   ans_sendcommand /PREP7
   ans_sendcommand )!*ENDIF
   ans_sendcommand )/go
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Preproc) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Preprocessor"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Preproc__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_UVBA_P7_T1 Men_UVBA_P7_T2 Men_UVBA_P7_T3 Men_ElemType Men_Real_copy Fnc_R_too Men_Material Fnc_DYNA_Shell Men_Section_Defs Men_Modeling Men_Meshing Men_CheckCtrl Men_NumCtrl Men_Archive Men_CoupCeqn Men_DYNAPREP {Men_MFSET {0 (lsdyna)}} {Men_ROM_Tool {0 (lsdyna+ROMES)}} Men_Radiosity {Men_QA_Test {0 (ALPHA)}} {Men_Loads {0 (lsdyna)}} Men_MultiPhys Men_CrePath Men_UVBA_P7_B1 Men_UVBA_P7_B2 Men_UVBA_P7_B3"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Preproc [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Prism) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 1 [list (mdl2d)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Prism"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Prism__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_RPR4 Fnc_RPR4_4 Fnc_RPR4_5 Fnc_RPR4_6 Fnc_RPR4_7 Fnc_RPR4_8 Fnc_RPRISM_minor Fnc_RPRISM_major Fnc_RPRISM Fnc_PRI2"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Prism [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_ProbDesign) { args } {
   ans_sendcommand )/NOPR
   ans_sendcommand )*GET,_Z1,ACTIVE,,ROUTIN
   ans_sendcommand )*IF,_Z1,NE,42,THEN
   ans_sendcommand /PDS
   ans_sendcommand )*ENDIF
   ans_sendcommand )/GO
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ProbDesign) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Prob Design"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ProbDesign__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_ProbDesign_-AnalysisFile- Men_ProbDesign_-ProbDefinitns- Men_ProbDesign_-ProbMethod- Men_PD_Execute Men_ProbDesign_-ResponseSurf- Men_ProbDesign_-ProbResults- Men_ProbDesign_-ProbDatabase-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ProbDesign [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ProbDesign_-AnalysisFile-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Analysis File"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ProbDesign_-AnalysisFile-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PD_AnFile Fnc_PDANL_ENTRY"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ProbDesign_-AnalysisFile- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ProbDesign_-ProbDefinitns-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Prob Definitns"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ProbDesign_-ProbDefinitns-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PDVAR_RV Fnc_PDPLOT_ENTRY Fnc_PDINQR_ENTRY Fnc_PDCFLD_ENTRY Fnc_PDCORR_ENTRY Fnc_PDVAR_RP"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ProbDesign_-ProbDefinitns- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ProbDesign_-ProbMethod-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Prob Method"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ProbDesign_-ProbMethod-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PDMETH_WIZ Fnc_PDMETH_MCS Fnc_PDMETH_RSM"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ProbDesign_-ProbMethod- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ProbDesign_-ResponseSurf-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Response Surf"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ProbDesign_-ResponseSurf-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_RSFIT_ENTRY Fnc_RSPLOT_ENTRY Fnc_RSPRNT_ENTRY Fnc_RSSIMS_ENTRY Fnc_RSOUT_ENTRY"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ProbDesign_-ResponseSurf- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ProbDesign_-ProbResults-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Prob Results"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ProbDesign_-ProbResults-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Statistics Men_Trends Men_Report"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ProbDesign_-ProbResults- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ProbDesign_-ProbDatabase-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Prob Database"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ProbDesign_-ProbDatabase-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PDSAVE Fnc_PDRESU Fnc_PDCLR_ENTRY Fnc_PD_STATUS"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ProbDesign_-ProbDatabase- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Properties) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Properties"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Properties__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ET Men_Real Fnc_MP Fnc_MPDELE Men_Plasticity Fnc_TB_hyper Fnc_TB_evisc Fnc_TB_anel Fnc_TB_concr Fnc_TB_creep Fnc_TB_swell Fnc_TB_bh Men_PiezoMatrice Men_FailureCrit Fnc_TB_pflow Fnc_TB_water"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Properties [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_QuerResults) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((POST1+RESULTS)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Query Results"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_QuerResults__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_QNSOL Fnc_QESOL Fnc_QGSOL"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_QuerResults [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ROM) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 1 [list (ELECMAG*PP*ED)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "ROM Tool"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ROM__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_ROM_-Setup- Men_ROM_-ModeSelection- Men_ROM_-SamplePtGen- Men_ROM_-RespSurface- Men_ROM_-RomDatabase- Men_ROM_-Export-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ROM [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ROM_-Setup-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Setup"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ROM_-Setup-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_RMANL Men_RomCapacitances Men_RomMasterNodes"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ROM_-Setup- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ROM_-ModeSelection-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Mode Selection"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ROM_-ModeSelection-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_RomModeSAuto Fnc_RomModeSManual Fnc_RomModeList"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ROM_-ModeSelection- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ROM_-SamplePtGen-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Sample Pt Gen"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ROM_-SamplePtGen-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_RomRunSamples"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ROM_-SamplePtGen- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ROM_-RespSurface-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Resp Surface"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ROM_-RespSurface-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_RomPolyOrder Fnc_RomDefineRS Fnc_RomFitRS Fnc_RomPlotRS Fnc_RomRSStatus"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ROM_-RespSurface- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ROM_-RomDatabase-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Rom Database"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ROM_-RomDatabase-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_RMSAVE Fnc_RMRESU"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ROM_-RomDatabase- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ROM_-Export-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Export"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_ROM_-Export-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_RMXPORT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ROM_-Export- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ROM_Oper) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 1 [list (ELECMAG*PP*ED)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "ROM Operations"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ROM_Oper__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_RMNEVEC Fnc_RMNDISP"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ROM_Oper [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ROM_Tool) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 1 [list (ELECMAG*PP*ED)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "ROM Tools"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ROM_Tool__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ROM_VSweep"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ROM_Tool [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Radiosity) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (AUX12*PR_CFD*PR_THERM*(RADSURF+THERMAL)*CFD)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Radiation Opts"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Radiosity__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_RadOpt12 Men_AdvSolOpt Fnc_RadOpt13"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Radiosity [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Real) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Real Constants"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Real__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_R Fnc_RTHICK Fnc_SETFGAP"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Real [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Real_copy) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Real Constants"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Real_copy__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_R Fnc_RTHICK Fnc_SETFGAP"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Real_copy [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_RebarDisplay) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Display Options"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_RebarDisplay__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_RebarNorm Fnc_RebarPlus Fnc_RebarOnly"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_RebarDisplay [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Rectangle) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Rectangle"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Rectangle__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BLC4_2d Fnc_BLC5_2d Fnc_RECTNG"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Rectangle [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Reflect) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Reflect"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Reflect__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_KSYMM Fnc_LSYMM Fnc_ARSYM Fnc_VSYMM Fnc_NSYM Men_Reflect_-Elements-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Reflect [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Reflect_-Elements-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Elements"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Reflect_-Elements-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ESYM Fnc_ENSYM"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Reflect_-Elements- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Reorder) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PREP7)*(NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Element Reorder"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Reorder__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_WFRONT Fnc_NOORDER Fnc_WSORT Fnc_WSTART Fnc_WMORE Fnc_Wave_List Fnc_WERASE Fnc_WAVES"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Reorder [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Report) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Report"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Report__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PDREP_OPT Fnc_PDREP_WRT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Report [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ReverseNorm) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Reverse Normals"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ReverseNorm__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ENSYMM_rv Fnc_LREVERSE Fnc_AREVERSE"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ReverseNorm [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Rigid_Deform) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (LSDYNA)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Rigid-Deformable"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Rigid_Deform__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_EDRD Fnc_DYNA_EDRI Fnc_DYNA_EDRC"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Rigid_Deform [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_RomAddCap) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Define"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_RomAddCap__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_RomAddSingCap Fnc_RomAddAllCap Fnc_RomCapList"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_RomAddCap [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_RomCapacitances) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Capacitances"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_RomCapacitances__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_RomAddCap Fnc_RomDelCap Fnc_RomCapList"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_RomCapacitances [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_RomMasterNodes) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Master Nodes"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_RomMasterNodes__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_RomDefMN Fnc_RomDelMN Fnc_RomListMN"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_RomMasterNodes [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_RotResults) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (STRUCTRL)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list ((POST1+RESULTS+ROTKEY)+(MODAL*HARMONIC*TRNSIENT*NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Rotor Dynamics"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_RotResults__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PLCAMPBELL Fnc_PRCAMPBELL Fnc_PLORBIT Fnc_PRORBIT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_RotResults [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_SE_Management) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "SE Management (CMS)"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_SE_Management__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SE_Man_GEN Fnc_SE_Man_USE Fnc_SE_Man_EXP"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_SE_Management [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_SUCALC_op) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (POST1+RESULTS)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Math Operations"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_SUCALC_op__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SUCALC_add Fnc_SUCALC_sub Fnc_SUCALC_mult Fnc_SUCALC_div Fnc_SUCALC_exp Fnc_SUCALC_cos Fnc_SUCALC_sin Fnc_SUCALC_acos Fnc_SUCALC_asin Fnc_SUCALC_atan Fnc_SUCALC_atan2 Fnc_SUCALC_log Fnc_SUCALC_abs Fnc_SUCALC_init Fnc_SUVECT_dot Fnc_SUVECT_cross Fnc_SUVECT_smult Fnc_SUEVAL_sum Fnc_SUEVAL_intg Fnc_SUEVAL_avg"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_SUCALC_op [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_SUCR_extr) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "External"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_SUCR_extr__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SUCR_elem Fnc_SUCR_comp"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_SUCR_extr [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_SUCR_sphre) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Sphere"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_SUCR_sphre__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SUCR_SPH1 Fnc_SUCR_by_dim"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_SUCR_sphre [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_SWADD) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Add More Surfaces"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_SWADD__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SWADD_cn Fnc_SWADD_an"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_SWADD [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_SWGEN) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Create New Set"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_SWGEN__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SWGEN_cn Fnc_SWGEN_an"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_SWGEN [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_SafetyFact) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_STRUC*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((POST1+RESULTS+STRUCTRL)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (LINPLUS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Safety Factor"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_SafetyFact__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_SafetyFact_-AllowableStrs- Fnc_SFACT Fnc_SFCALC Fnc_SFACT_0"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_SafetyFact [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_SafetyFact_-AllowableStrs-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Allowable Strs"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_SafetyFact_-AllowableStrs-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SALLOW Fnc_TALLOW Fnc_SALLOW_reset Fnc_TALLOW_reset"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_SafetyFact_-AllowableStrs- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Scale) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (priges)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Scale"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Scale__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_KPSCAL Fnc_LSSCAL Fnc_ARSCAL Fnc_VLSCAL Men_Scale_-Nodes-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Scale [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Scale_-Nodes-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Nodes"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Scale_-Nodes-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_NSCALE_copy Fnc_NSCALE_move"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Scale_-Nodes- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Section_Defs) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_STRUC*PR_THERM*pr_set)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Sections"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Section_Defs__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Section_Library {Men_Section_Defs_-Beam- {0 (PR_STRUC*pr_set)}} Men_Section_Defs_-Shell- {Men_Section_Defs_-Pretension- {0 (PR_STRUC*pr_set)}} {Men_Section_Defs_-Joints- {0 (PR_STRUC*pr_set)}} Men_Section_Defs_-Reinforcing- Men_Section_Defs_-Pipe- Men_Section_Defs_-Axis- Men_Section_Defs_-Contact- Fnc_SLIST Fnc_SDELETE"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Section_Defs [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Section_Defs_-Beam-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Beam"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Section_Defs_-Beam-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_Beam_Tool {Men_Beam_Custom {0 (PR_STRUC*pr_set)}} {Men_Beam_Taper {0 (PR_STRUC*pr_set)}} Fnc_SECPLOTbeam Fnc_SectControl Fnc_BeamPreInt Fnc_BeamComposit"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Section_Defs_-Beam- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Section_Defs_-Shell-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Shell"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Section_Defs_-Shell-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Men_Lay-up {0 (PR_STRUC*LAYTHERM*pr_set)}} {Fnc_Preintegrate {0 (PR_STRUC*pr_set)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Section_Defs_-Shell- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Section_Defs_-Pretension-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Pretension"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Section_Defs_-Pretension-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Men_SectionsPSMESH {0 (PR_STRUC*pr_set)}} {Fnc_PreSecModNam {0 (PR_STRUC*pr_set)}} {Fnc_PreSecModNor {0 (PR_STRUC*pr_set)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Section_Defs_-Pretension- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Section_Defs_-Joints-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Joints"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Section_Defs_-Joints-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Fnc_JointAddEdit {0 (PR_STRUC*pr_set)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Section_Defs_-Joints- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Section_Defs_-Reinforcing-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Reinforcing"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Section_Defs_-Reinforcing-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Fnc_ReinfAddEdit {0 (PR_STRUC*pr_set)}} {Men_RebarDisplay {0 (PR_STRUC*pr_set)}} {Fnc_SECPLOTreinf {0 (PR_STRUC*pr_set)}} {Fnc_SECCONreinf {0 (PR_STRUC*pr_set)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Section_Defs_-Reinforcing- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Section_Defs_-Pipe-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Pipe"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Section_Defs_-Pipe-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PipeAdd Fnc_PipeEdit Fnc_PipeFactors Fnc_SECPLOTpipe"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Section_Defs_-Pipe- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Section_Defs_-Axis-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Axis"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Section_Defs_-Axis-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Fnc_AxisAdd {0 (PR_STRUC*pr_set)}} {Fnc_AxisEdit {0 (PR_STRUC*pr_set)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Section_Defs_-Axis- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Section_Defs_-Contact-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Contact"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Section_Defs_-Contact-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Fnc_ContSectAdd {0 (PR_STRUC*pr_set)}} {Fnc_ContSectEdit {0 (PR_STRUC*pr_set)}}"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Section_Defs_-Contact- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Section_Library) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Section Library"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Section_Library__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SecLib Fnc_SecRead"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Section_Library [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_SectionsPSMESH) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Pretensn Mesh"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_SectionsPSMESH__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PSME_en Fnc_PSME_seln Fnc_PSME_ln Fnc_PSME_an Fnc_PSME_vn Men_PSMESH_opt_copy"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_SectionsPSMESH [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_SizeCntrl) { args } {
   ans_sendcommand )/NOPR
   ans_sendcommand )*GET,_z1,ACTIVE,,KEYWORD,,MESHTOOL
   ans_sendcommand )*IF,_z1,eq,1,THEN
   ans_sendcommand )*create,ansuitmp
   ans_sendcommand )*msg,note,
   ans_sendcommand )SmartSize basic settings cannot be used while the %/&
   ans_sendcommand )MeshTool is active.
   ans_sendcommand )*end
   ans_sendcommand )/input,ansuitmp
   ans_sendcommand )*ENDIF
   ans_sendcommand )/GO
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_SizeCntrl) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (igesfail)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Size Cntrls"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_SizeCntrl__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PMLSIZ Men_SizeCntrl_-SmartSize- Men_SizeCntrl_-ManualSize- Men_SizeCntrl_-ConcentratKPs-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_SizeCntrl [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_SizeCntrl_-SmartSize-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "SmartSize"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_SizeCntrl_-SmartSize-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ss_SIZE Fnc_ss_Advopt Fnc_ss_STAT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_SizeCntrl_-SmartSize- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_SizeCntrl_-ManualSize-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "ManualSize"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_SizeCntrl_-ManualSize-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_ManSizeGlobal Men_ManSizeAreas Men_ManSizeLines Men_ManSizeKeypoints Men_ManSizeLayers"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_SizeCntrl_-ManualSize- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_SizeCntrl_-ConcentratKPs-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Concentrat KPs"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_SizeCntrl_-ConcentratKPs-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_KSCON Fnc_KSCON_stat"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_SizeCntrl_-ConcentratKPs- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Sol_ThinFilm) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 1 [list (FULL_ANS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "ThinFilm"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Sol_ThinFilm__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_DMPEXT Fnc_ABEXTRACT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Sol_ThinFilm [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Solu_Load) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (LSDYNA)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Loading Options"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Solu_Load__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_Load Men_DYNA_dLoad Fnc_LOADPLOT Fnc_EDFPLOT Fnc_EDNDTSD Men_DYNA_Curve Men_DYNA_Accel Fnc_LDREAD_dyna Fnc_BFLIST_dyna Fnc_BFDELE_dyna Fnc_TUNIF Fnc_TREF"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Solu_Load [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_Solution) { args } {
   ans_sendcommand )/nopr
   ans_sendcommand )*GET,_z1,common,,cycsym_com,,int,2
   ans_sendcommand )*GET,_z2,common,,MFLDCMD,,int,2279 !
   ans_sendcommand )KEYWD,CYCLIC,0
   ans_sendcommand )KEYWD,CYCGEN,0
   ans_sendcommand )KEYWD,mfx,0
   ans_sendcommand )*IF,_z1,gt,1,then
   ans_sendcommand )KEYWD,CYCLIC,1
   ans_sendcommand )*ELSEIF,_modcyc,eq,1,then
   ans_sendcommand )KEYWD,CYCGEN,1
   ans_sendcommand )*ENDIF
   ans_sendcommand )*IF,_z2,ge,2,then
   ans_sendcommand )KEYWD,mfx,1
   ans_sendcommand )*ENDIF
   ans_sendcommand /SOLU
   ans_sendcommand )*get,_z10,active,,keyw,,elecstat
   ans_sendcommand )*get,_z11,active,,keyw,,radsurf
   ans_sendcommand )*get,_z12,active,,keyw,,magnetic
   ans_sendcommand )*get,_z13,active,,keyw,,electric
   ans_sendcommand )*get,_z14,active,,keyw,,cfd
   ans_sendcommand )*get,_z15,active,,keyw,,circ
   ans_sendcommand )*get,_z16,active,,keyw,,edgeflx
   ans_sendcommand )*get,_z17,active,,keyw,,fluid
   ans_sendcommand )*get,_z18,active,,keyw,,thermal
   ans_sendcommand )_z30=_z10+_z11+_z12+_z13+_z14+_z15+_z16+_z17+_z18
   ans_sendcommand )*get,_z19,active,,keyw,,pr_elmag
   ans_sendcommand )*get,_z20,active,,keyw,,pr_multi
   ans_sendcommand )*get,_z21,active,,keyw,,pr_cfd
   ans_sendcommand )_z30=_z30+_z19+_z20+_z21
   ans_sendcommand )keyw,oldmenu,0
   ans_sendcommand )*if,_z30,gt,0,then
   ans_sendcommand )keyw,simploff,1
   ans_sendcommand )keyw,oldmenu,1
   ans_sendcommand )*endif
   ans_sendcommand )!keyword for host selection
   ans_sendcommand )keyw,hscript,0
   ans_sendcommand )*get,_z31,common,,soptcm,,int,119
   ans_sendcommand )*if,_z31,eq,2,then
   ans_sendcommand )keyw,hscript,1
   ans_sendcommand )*endif
   ans_sendcommand )keyw,pertbslv,0
   ans_sendcommand )*get,_z32,common,,restartcm,,int,84
   ans_sendcommand )*if,_z32,ne,0,then
   ans_sendcommand )keyw,pertbslv,1
   ans_sendcommand )*endif
   ans_sendcommand )/go
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Solution) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Solution"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Solution__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_UVBA_Solu_T1 Men_UVBA_Solu_T2 Men_UVBA_Solu_T3 Men_DYNA_Cnstr {Men_DYNA_Veloc {0 (LSDYNA)}} {Men_Solu_Load {0 (LSDYNA)}} Men_Rigid_Deform Men_Default_Controls Men_DYNA_TimeCon Men_DYNA_OutCtrl {Fnc_DYNA_Input {0 (LSDYNA)}} {Fnc_SOLVEDYN {0 (LSDYNA)}} {Men_Analysis {1 (LINPLUS*THERMAL*ELECMAG)} {0 (lsdyna)}} {Fnc_HostSelect {0 (lsdyna+PARPERF)}} {Men_MasterDOF {0 (lsdyna+((static+buckling+trnsient)*SIMPLOFF*REDUCED))}} {Men_GapCond {0 (lsdyna+((static+modal+buckling+trnsient)*SIMPLOFF*REDUCED*MODESUP))}} {Men_DefineLoads {0 (lsdyna)}} {Men_LoadStepOpts {0 (lsdyna)}} {Men_MultiPhys {0 (lsdyna+((static+modal+buckling+trnsient)*SIMPLOFF))}} Men_SE_Management Fnc_NLHIST {Fnc_-Solve- {0 (mfx)}} Men_-REZONE- {Men_MFSET_Solu {0 (lsdyna)}} {Men_ROM_Tool {0 (lsdyna+ROMES)}} {Men_Sol_ThinFilm {0 (lsdyna+TFILM)}} Men_Adamsc Men_Radiosity Men_Diagnostics {Fnc_FullGui {0 (lsdyna+oldmenu)}} {Fnc_ReduceGui {0 (lsdyna+oldmenu)}} Men_UVBA_Solu_B1 Men_UVBA_Solu_B2 Men_UVBA_Solu_B3"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Solution [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-Solve-_HEADMen_Solution) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-Solve"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-Solve-_HEADMen_Solution__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "{Fnc_SOLVE {0 (lsdyna+pertbslv)}} {Fnc_SOLVE_PERT {0 (lsdyna+PERTBSLV)}} {Fnc_LSSOLVE {0 (lsdyna+pertbslv+((modal+buckling)*SIMPLOFF))}} {Fnc_ADAPT {0 (lsdyna+((static+modal+buckling+trnsient)*SIMPLOFF))}} {Men_EMASOLV {0 (lsdyna+(ELECSTAT*(static+trnsient)*SIMPLOFF*REDUCED*MODESUP))}} Fnc_CYCOPT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-Solve-_HEADMen_Solution [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_SpectrumOpts) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+(SPECTRUM*NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (LINPLUS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Spectrum"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_SpectrumOpts__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_-SinglePt- Fnc_-MultiPt- Fnc_DDAM Men_MODCOM_dd Fnc_-PSD-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_SpectrumOpts [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-SinglePt-_HEADMen_SpectrumOpts) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-SinglePt"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-SinglePt-_HEADMen_SpectrumOpts__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SVTYP_etc Fnc_FREQ Fnc_SV Fnc_SV_stat Fnc_FREQ_erase Men_MODCOM_sp"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-SinglePt-_HEADMen_SpectrumOpts [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-MultiPt-_HEADMen_SpectrumOpts) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-MultiPt"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-MultiPt-_HEADMen_SpectrumOpts__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SPUNIT Fnc_SPFREQ Fnc_SPVAL Fnc_PFACT_mult Fnc_SPFRQ_eras Fnc_SPGRAPH Men_MODCOM_mp"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-MultiPt-_HEADMen_SpectrumOpts [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Fnc_-PSD-_HEADMen_SpectrumOpts) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Fnc_-PSD"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Fnc_-PSD-_HEADMen_SpectrumOpts__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PSDUNIT_psd Fnc_PSDVAL_psd Fnc_PFACT_psd Men_Correlation Fnc_PSDRES Fnc_PSDFRQ_erasP Fnc_PSDGRAPH Fnc_MODCOM_psd"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Fnc_-PSD-_HEADMen_SpectrumOpts [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Sphere) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 1 [list (mdl2d)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Sphere"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Sphere__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SPH4 Fnc_SPH4_hollow Fnc_SPH5 Fnc_SPHERE"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Sphere [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Spline) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Splines"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Spline__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BSPLIN_wp Fnc_BSPLIN_kp Fnc_SPLINE Men_Spline_opt"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Spline [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Spline_opt) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "With Options"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Spline_opt__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_BSPLIN_wp_op Fnc_BSPLIN_kp_op Fnc_SPLINE_op"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Spline_opt [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Spotweld) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (LSDYNA+PREP7)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Spotweld"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Spotweld__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DYNA_Spotwld Fnc_DYNA_Spotgen Fnc_DYNA_Wldlist Fnc_DYNA_Wlddele"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Spotweld [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Statistics) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Statistics"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Statistics__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PDSHIS Fnc_PDHIST Fnc_PDCDF Fnc_PDPROB Fnc_PDPINV"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Statistics [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_StrucApply) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*PR_CFD*pr_set)+(lsdyna))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list (PREP7*SOLUTION)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Structural"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_StrucApply__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_AppDisplace Men_AppForce Men_AppPressure Men_AppStruTemp Men_AppStruInertia Fnc_SLOAD Men_AppSpectrum Fnc_GSBloads Fnc_OceanAddEdit Men_AppOtherStru"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_StrucApply [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_StrucDelete) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_STRUC*PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Structural"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_StrucDelete__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_DelDisplace Men_DelForce Men_DelPressure Men_DelStruTemp Men_DelStruInert Fnc_PSecLdDel Fnc_OCDELETE Men_DelSpectrum Men_DelOtherStru"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_StrucDelete [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Submodel) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((POST1+RESULTS)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Submodeling"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Submodel__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_CBDOF Fnc_BFINT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Submodel [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Subtract) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Subtract"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Subtract__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_VSBV Fnc_ASBA Fnc_LSBL Men_Subtract_opt"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Subtract [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Subtract_opt) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "With Options"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Subtract_opt__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_VSBV_opt Fnc_ASBA_opt Fnc_LSBL_opt"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Subtract_opt [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Sum) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Calc Geom Items"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Sum__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_KSUM Fnc_LSUM Fnc_ASUM Fnc_VSUM Fnc_GSUM"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Sum [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_SurfOper) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((POST1+RESULTS)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Surface Operations"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_SurfOper__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_SurfOper_-CreateSurface- Fnc_SUSEL Fnc_SUDEL_surf Fnc_SUMAP_itm Fnc_SUMAP_srfclr Fnc_SUPL Fnc_SUPL_vect Fnc_SUPR_srfs Fnc_SUGET Men_SUCALC_op Fnc_SUSAVE Fnc_SURESU Men_SurfOper_-Status-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_SurfOper [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_SurfOper_-Status-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Status"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_SurfOper_-Status-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SUPR_glb"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_SurfOper_-Status- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_SurfOper_-CreateSurface-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Create Surface"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_SurfOper_-CreateSurface-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_SUCR_cplane Men_SUCR_sphre Fnc_SUCR_infc"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_SurfOper_-CreateSurface- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Surf_Mesh) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Radiation Surface Mesh"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Surf_Mesh__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_Cr_Mesh Fnc_Cl_Mesh Fnc_Stat_Mesh"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Surf_Mesh [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_SymmetryOptions) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Radiation Symmetry Options"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_SymmetryOptions__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_Planar_Sym Fnc_Cyc_Sym Fnc_Condensation Fnc_Clear_Sym Fnc_Status"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_SymmetryOptions [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_TetImprove) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Improve Tets"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_TetImprove__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_VIMP Fnc_TIMP"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_TetImprove [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ThermApply) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_THERM*PR_FLUID*PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (THERMAL*FLUID*CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list (PREP7*SOLUTION)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Thermal"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ThermApply__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_AppTemp Men_AppHeatFlow Men_AppConvect Men_AppHeatFlux Men_AppHeatGen Men_AppRad Men_AppRadiSF"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ThermApply [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ThermDelete) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (PR_THERM*PR_FLUID*PR_CFD*pr_set)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (THERMAL*FLUID*CFD*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 0 [list (PREP7*SOLUTION)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Thermal"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ThermDelete__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_DelTemp Men_DelHeatFlow Men_DelConvect Men_DelHeatFlux Men_DelHeatGen Men_DelRad Men_DelRadiSF"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ThermDelete [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ThinFilm_Oper) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((MODAL+TFILM)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (FULL_ANS)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "ThinFilm"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ThinFilm_Oper__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_RMFLVEC"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ThinFilm_Oper [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_TimeFreq) { args } {
   ans_sendcommand )/NOPR
   ans_sendcommand )*GET,_z1,common,,anscom,,int,52
   ans_sendcommand )KEYW,NLCNTRL,_z1
   ans_sendcommand )*GET,_z2,common,,sectioncm,,int,14
   ans_sendcommand )KEYW,PIPEEXIS,_z2
   ans_sendcommand )/GO
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_TimeFreq) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+(edgeelc*HARMONIC)*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (LINPLUS*THERMAL*ELECMAG)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Time/Frequenc"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_TimeFreq__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_TIME_time Fnc_TIME_sub Fnc_HARFRQ_etc Fnc_HROCEAN_etc Fnc_QUASISTAT Fnc_Damping Men_TimintChoice"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_TimeFreq [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlexec(Men_TimePost) { args } {
   ans_sendcommand )/nopr
   ans_sendcommand )!*get,_z1,active,,routin
   ans_sendcommand )!*if,_z1,ne,36,then
   ans_sendcommand /POST26
   ans_sendcommand )!*endif
   ans_sendcommand )~eui,'euidl::results::timeHist::varInterface'
   ans_sendcommand )/go
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_TimePost) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "TimeHist Postpro"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_TimePost__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_UVBA_P26_T1 Men_UVBA_P26_T2 Men_UVBA_P26_T3 Fnc_VariView Men_p26Settings Fnc_STORE Fnc_p26DefineVar Men_DYNA_Read Fnc_PRVAR_p26 Fnc_EXTREM Fnc_PLVAR_p26 Men_p26Oper Men_p26Table Fnc_EDNDTSD Fnc_RESP Men_p26Emag Fnc_RPSD Fnc_COPSD Fnc_RESET_p26 Men_UVBA_P26_B1 Men_UVBA_P26_B2 Men_UVBA_P26_B3"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_TimePost [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_TimintChoice) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PREP7*SOLUTION)+(TRNSIENT*NOFILTER))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (LINPLUS*THERMAL*ELECMAG)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Time Integration"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_TimintChoice__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_TIMINT_TINT Fnc_TIMINT_TINT2"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_TimintChoice [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_ToBeDone) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "To Be Done"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_ToBeDone__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_ToBeDone_-ToBeDone-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_ToBeDone [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_To_Be_Done) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "To Be Done"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_To_Be_Done__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_To_Surf_Norm) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "To Surf Norm"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_To_Surf_Norm__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_NORA Fnc_NORL Fnc_NORL_with"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_To_Surf_Norm [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Transduc) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Transducers"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Transduc__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_Transduc_-Electromechanic-"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Transduc [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Transduc_-Electromechanic-) { top {key 0} {level -1} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Electromechanic"]
   lappend tags branch
   lappend tags HEAD
   set icon {}
   lappend tags headlevel__$level
   set branchName [list Men_Transduc_-Electromechanic-__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_EMTGEN"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Transduc_-Electromechanic- [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Transfer_Coord) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Transfer Coord"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Transfer_Coord__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_KTRAN Fnc_LTRAN Fnc_ATRAN Fnc_VTRAN Fnc_TRANS"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Transfer_Coord [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_Trends) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Trends"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_Trends__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_PDSENS Fnc_PDSCAT Fnc_PDCMAT_ENTRY"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_Trends [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_VEOR) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Volume Brick Orient"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_VEOR__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_VEORth Fnc_VEORk Fnc_VEORl Fnc_VEORa Fnc_VEORdel"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_VEOR [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_VectFluxN) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((VECTORP+edgeflx)*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Flux Normal"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_VectFluxN__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DL_aN_na Fnc_DA_aN Fnc_DSYM_aN"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_VectFluxN [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_VectFluxP) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((VECTORP+edgeflx)*NOFILTER)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Flux Par'l"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_VectFluxP__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_DL_aP_na Fnc_DA_aP Fnc_DSYM_aP"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_VectFluxP [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_dDYNROT) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list ((PR_STRUC*pr_set)+(LSDYNA))]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (STRUCTRL*NOFILTER)]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Rotated Nodal"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_dDYNROT__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_adDYNROT Fnc_dDYNROT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_dDYNROT [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_p26Emag) { top {key 0} {level 0} } {
   global env
   incr level
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (lsdyna)]]} {
      return -code error
   }
   if {![ans_getfilter 0 [list (POST26+(MAGNETIC*CIRC))]]} {
      if {$AnsysGUI::MainMenuArr(pref,filtering)} {
         lappend tags disabled
      } else {
         return -code error
      }
   }
   if {![ans_getfilter 1 [list (ELECMAG)]]} {
      return -code error
   }
   set branchLeafs [list]
   set str [::msgcat::mc "Elec&Mag"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_p26Emag__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_P26Circ Fnc_PMGTRAN"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_p26Emag [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_p26Oper) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Math Operations"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_p26Oper__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_ADD Fnc_PROD Fnc_QUOT Fnc_ABS Fnc_SQRT Fnc_EXP Fnc_CLOG Fnc_NLOG Fnc_DERIV Fnc_INT1 Fnc_CONJUG Fnc_REAL_p26 Fnc_IMAGIN Fnc_ATAN Fnc_LARGE Fnc_SMALL Fnc_CFACT"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_p26Oper [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_p26Settings) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Settings"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_p26Settings__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_p26FileSet Fnc_p26DataSet Fnc_p26ListSet Fnc_p26GrphSet"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_p26Settings [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(Men_p26Table) { top {key 0} {level 0} } {
   global env
   incr level
   set branchLeafs [list]
   set str [::msgcat::mc "Table Operations"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list Men_p26Table__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Fnc_VGET Fnc_VPUT Fnc_FILL_p26"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) Men_p26Table [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
proc ::euidl::uidlmenu::uidlmenuItems::uidlmenu(MenuRoot) { top {key 0} {level 0} } {
   global env
   set branchLeafs [list]
   set str [::msgcat::mc "Main Menu"]
   lappend tags branch
   lappend tags headlevel__$level
   set icon {}
   set branchName [list MenuRoot__$top "$str" $tags $icon]
   if { $key == 1 } {
      return $branchName
   }
   set nodes "Men_UVBA_Main_T1 Men_UVBA_Main_T2 Men_UVBA_Main_T3 Fnc_Preferences Men_Preproc Men_Solution Men_GenlPost Men_TimePost {Men_DropTest {0 (DROPTEST)}} Men_ROM Men_ProbDesign Men_Aux12 Fnc_UNDO Fnc_FINISH {Men_FP-Power Island} {Men_UtilMenu {0 (UTILMENU)}} Men_UVBA_Main_B1 Men_UVBA_Main_B2 Men_UVBA_Main_B3"
   foreach node $nodes {
      set ignore 0
      if { [llength $node] > 1 } {
         foreach filterdata [lrange $node 1 end] {
            set type [lindex $filterdata 0]
            set filters [lindex $filterdata 1]
            foreach filt $filters {
               if { ![ans_getfilter $type [list $filt]] } {
                  set ignore 1
                  continue
               }
            }
         }
      }
      if {$ignore} { continue }
      if { ![catch {::euidl::uidlmenu::uidlmenuItems::uidlmenu([lindex $node 0]) MenuRoot [expr $key+1] $level} branch] && [llength $branch]} {
         if { [string match {} $branch] } {
            continue
         }
         lappend branchLeafs $branch
      } else {
         #puts "[info script] error $node = $branch"
      }
   }
   if { [string match {} $branchLeafs] } {
      return -code error
   }
   return $branchLeafs
}
